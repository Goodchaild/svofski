			" Б А Й Т - 1 6 "

		           Киров, 1993
                  информационно-рекламный выпуск
			  центра "БАЙТ"
                 для пользователей ПК "Вектор-06Ц"

 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +  Наш адрес: г. Киров, Октябрьский пр-т, 118, м-н "Дом Радио" + 
 +   Адрес для писем" 610006, г.Киров, а/я 1248, Зубкову А.Н.   +
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


     			  СЖАТИЕ ДАННЫХ
			  -------------

 В этой статье мы продолжаем разговор о сжатии данных,который мы
начали в предыдущих выпусках "Байта". Речь идет о  сжатии графи-
ческих образов (картинок). Идея сжатия проста. Переводим прямоу-
гольную картинку в одномерный массив.Ищем в массиве цепочки оди-
наковых элементов. Найдя такую цепочку, заменяем ее на три  эле-
мента: признак сжатых данных, что сжато (образец), сколько  раз.
 Если исходные цепочки длинные, то сжатие очень эффективно. Лег-
ко увидеть и следующее: если длина цепочки  равна 2 , то  сжатие
производить невыгодно.
 Имеется множество различных модификаций  этого  общего  метода.
Они отличаются выбором признака сжатия и организацией сжатых дан-
ных.  Кроме  того  перевод картинки в одномерный массив и сжатие
можно производить как в два этапа, так  и  одновременно.  Размер
элементов в массиве может быть произвольным: восемь бит (байт) ,
четыре бита (полубайт), и т.д. Следует заметить, что переходя  к
битовым модификациям, мы выигрываем в  эффективности  сжатия, но
проигрываем в скорости распаковки,кроме того возрастает трудоем-
кость написания упаковщика/ распаковщика.  Нельзя  забывать, что
распаковщик должен знать, когда закончить распаковку. Для  этого
нужно знать или длину исходной картинки или длину сжатой.
 Итак ,рассмотрим несколько конкретных модификаций данного мето-
да.

 А. Логика алгоритма полностью аналогична выше рассмотренному об-
щему методу. Организация элементов в массиве - байтовая. Особен-
ность: весь массив просматривается и определяется байт,  который
не встречается в массиве вообще. Этот байт запоминается в начале
сжатой картинки и используется затем как признак сжатия.  Допус-
тим исходный массив был: 7,0,0,0,0,0,5,5,5,5,8,... и байт,  рав-
ный 1, не встречался вообще, тогда сжатый массив будет вылядеть:

 1 , 7 , 1 , 0 , 5 , 1 , 5 , 4 , 8 ,...
 I       I   I   I
 I       I   I   +-- сколько раз
 I       I   +------ образец
 I       +---------- признак сжатия
 +------------------ байт,использующийся как признак сжатия.

 Если все байты встречаются в исходном массиве,  то  можно  либо
найти  сочетание  двух байтов, не встречающееся в массиве,  либо
хранить адреса наиболее редко встречающегося байта отдельно, вы-
черкнуть его из массива (заменить на другой байт) и использовать
в качестве признака сжатия.
 Данная модификация гарантирует от увеличения обьема сжатых данных
при обилии цепочек одинаковых элементов с длиной, равной 2, т.к.
признак сжатия мы ставим только тогда, когда нам выгодно это сжа-
тие производить. Однако возникают вышеописанные сложности при оп-
ределении байта - признака сжатия.

 B. Модификация также байтовая и часто используется программиста
ми на "Синклере". Исходный массив заменяется цепочками  двух ти-
пов.
 1-ый тип: длина цепочки, последовательность байтов;
 2-ой тип: длина цепочки, байт-образец.
 Оба типа различаются старшим битом длины цепочки. Если он уста-
новлен в 0, то далее следует цепочка неупакованных байтов, соот-
ветствующей длины. Если старший бит длины устновлен в 1, то  ос-
тавшиеся семь бит определяют длину цепочки из одинаковых элемен-
тов, равных байту-образцу.
 Например, исходный массив: 

 7,0,0,0,0,0,5,5,5,5,8,9,3,.....

 Сжатый массив:

 1 , 7 , -5 , 0 , -4 , 5 , 3 , 8 , 9 , 3 , .......,0
 I        I   I                                    I
 I        I   +-- байт-образец     признак конца --+
 I        +------ признак/длина сжатых данных
 +--------------- признак/длина несжатых данных

 Распаковка прекращается, когда обнаруживаем байт - признак/дли-
ну, равный 0.

 C. Наиболее простая, универсальная и часто встречающаяся  моди-
фикация.
 Логика алгоритма такова. Просматриваем исходный массив,если на-
ходим два и более одинаковых  элемента  рядом, то заменяем их на
цепочку: этот же элемент, этот же элемент, длина исходной цепоч-
ки. Остальные элементы переписываем без изменений.Признаком сжа-
тия являются два одинаковых элемента рядом.
 Например, исходный массив: 7,0,0,0,0,0,5,5,5,5,8,....
 Сжатый массив: 7 , 0 , 0 , 4 , 5 , 5 , 3 , 8 , ....
                    I   I   I
признак сжатия -----+---+   +- длина цепочки
 
 То, что длина цепочки на 1 меньше реальной обьясняется логикой
алгоритма при распаковке. Первый  байт-признак  рассматривается
сам по себе, а вот следующий уже сигнализирует о сжатых данных.
 В качестве примера приведем тексты  упаковщика и  распаковщика
на языке Ассемблера для процессора КР580.

; упаковщик
; входные данные: BC - начало исх. массива, HL - конец исх. мас
; сива + 1, DE - начало буфера для сжатой информации.
UP: SHLD KON
    INX D    ;оставляем место для длины сжатой картинки
    INX D
    PUSH D
    XCHG
UP1: MVI D,0 ; D - счетчик одинаковых байтов
    LDAX B   ; первый байт переписываем по умолчанию
    MOV M,A
    MOV E,A  ; E - значение предыдущего байта
    INX H
UP2: INX B   ; смещаемся на следующий байт
    CALL SRAV; достигли конца исх. текста?
    JZ UP5   ; тогда на завершение алгоритма
    LDAX B   ; берем очередной байт
    CMP E    ; сравниваем с предыдущим
    JNZ UP3  ; равны?
    INR D    ; да, тогда увеличиваем счетчик
    JNZ UP2  ; если нет переполнения разр.сетки, продолжаем цикл
    JMP UP7  ; есть переполнение - разрядности не хватает
UP3: DCR D   ; проверяем была ли перед этим цепочка один.байтов
    INR D
    JZ UP4   ; нет
UP7: MOV M,E ; записываем предыд.байт и длину цепочки
    INX H    ; в сжатый файл
    MOV M,D
    INX H
    MVI D,0  ; обнуляем счетчик один. байтов
UP4: MOV M,A ; записываем текущий байт в сжатый файл
    INX H    ; делаем очередной шаг
    MOV E,A  ; обновляем байт-образец
    JMP UP2  ; повторяем цикл
UP5: DCR D   ; проверяем счетчик - длину цепочки
    INR D
    JZ UP6   ; длина равна 0
    MOV M,E  ; иначе записываем байт-образец и длину цепочки
    INX H
    MOV M,D
UP6: SHLD KBUF ; запоминаем адрес конц сжатого файла
    POP D    ; определяем длину сжатого файла и запоминаем ее
    INX H    ; в первых двух байтах сжатого файла.
    MOV A,L
    SUB E
    MOV L,A
    MOV A,H
    SBB D
    DCX D
    STAX D
    DCX D
    MOV A,L
    STAX D
    RET
; п/п определения конца исх. текста
SRAV: PUSH H
     LHLD KON
     MOV A,H
     CMP B
     JNZ SRAV1
     MOV A,L
     CMP C
SRAV1: POP H
     RET
KON: DW 0
KBUF: DW 0

; распаковщик
; вход.данные: HL - начало упакованных данных,
; BC - начало распакованных данных.
; выход.данные: BC - конец распак. данных + 1
RAS:	MOV E,M	; извлекаем длину сжатой картинки
	INX H
	MOV D,M
	INX H
	PUSH D
	MOV A,M	; достаем первый байт по умолчанию
RAS1:	MOV E,A	; и переписываем его в расп.файл
	STAX B
	INX B
RAS3:	INX H	; делаем шаг
	XTHL    ; конец файла?
        DCX H
	MOV A,L
	ORA H
	XTHL
	JZ RAS4	; да
	MOV A,M	; тек. байт совпадает с предыдущим?
	CMP E
	JNZ RAS1; нет - просто переписываем
	INX H	; да - достаем длину сжатой цепочки
	MOV D,M
	MOV A,E	; записываем байт-образец заданное число раз
RAS2:	STAX B
	INX B
	DCR D
	JNZ RAS2
	JMP RAS3
RAS4:	POP D	; конец программы
	RET

 D. Имеется еще одна модификация, очень похожая на предыдущую.
Так называемый "разностный алгоритм", часто используемый в гра-
фических редакторах на IBM. При его работе исходный массив пе-
реводится в промежуточную фазу следующим образом: первый  эле-
мент переписывается без изменений, вместо второго записывается
разность между вторым и первым, вместо третьего - разность меж-
ду третьим и вторым и  т.д. Т.е. вместо текущего элемента запи-
сывается разность между текущим и предыдущим элементами. Теперь
вместо цепочек из одинаковых элементов, мы получили цепочки из
нулей. Следующим этапом является замена  таких  цепочек  двумя
элементами: 0, длина цепочки.
 Пример, исх.массив: 7,0,0,0,0,0,5,5,5,5,8,...
        пром.массив: 7,-7,0,0,0,0,5,0,0,0,3,...
        сжат.массив: 7,-7,0,4,5,0,3,3,...

 Распаковка идет в обратном порядке. Текущий элемент определя-
ется как сумма текущего элемента сжатого массива и предыдущего
элемента распакованного массива. Если встречается 0, то преды-
дущий элемент распакованного массива повторяется заданное число
раз. 
 Естественно в реальном алгоритме построение всего промежуточ-
ного массива не производится, т.к. нас в каждый момент времени
интересует только текущая разность между текущим и предыдущим
элементами массива, а не все сразу.

					Луппов Г.Б., Киров



                      ПРОГРАММА "ШРИФТ"
                     -----------------

 Многие компьютерные игры удивляют нас своими оригинальными  надпи-
сями. На экране появляются наклонные, утолщенные, готические, рисо-
ванные буквы, иероглифы и другие символы. Это делает игровую  прог-
рамму более привлекательной.
 В том, что разработка шрифта - занятие длительное  и  кропотливое,
никого убеждать не нужно. Данная программа позволяет облегчить его.
Сделать это  можно  следующим  образом: вначале извлечь  интересные
шрифты из готовых программ, а затем использовать их для собственных
целей. Кроме того программа знакомит с основами программирования на
языке Ассемблер. Программа работает совместно с "Монитором",исполь-
зуя некоторые его подпрограммы.
 Для начала нужно оттранслировать данный текст  программы  согласно
описания    "Ассемблер-редактор".  Затем    директивой     Монитора
М1800,194Е,9200 переместить программу по рабочим адресам (начальный
адрес - 9200). Нажав клавиши УС+БЛК+СБР загрузить  любую программу.
 Снова войти в Монитор и командой G9200 запустить программу "Шрифт",
изменяя адреса исследуемой программы клавишами  управления, следить
за окном в нижней части экрана. Окно содержит набор знаков,формиру-
емых в данный момент знакогенератором. Почти всегда  это  будут ка-
кие-то случайные формы. Программа "Шрифт" поможет найти место  раз-
мещения  знакогенератора в выбранной игровой  программе. Поиск осу-
ществляется с помощью клавиш управления.
 Когда в  окне начнут появляться  какие-нибудь  осмысленные  наборы
знаков, следует с помощью клавиш совместить  форму, соответствующую
букве алфавита "А" с левым краем окна.Потом следует запомнить адрес
начала знакогенератора, выведенный в левом верхнем углу экрана,вый-
ти в Монитор (БЛК+СБР) и записать  набор знаков на  магнитную ленту
командой W.
 Теперь всякий раз, когда мы захотим использовать выбранный шрифт в
собственной программе, нужно будет загрузить его по адресу, с кото-
рого расположен знакогенератор.
 Теперь все появляющиеся на экране надписи и даже листинг программы
будут написаны новым шрифтом.

 Исходный текст программы:

       ORG 9200H  ;начальный рабочий адрес программы
       LXI H,TITR ;оформление
       CALL 0F818H;экрана
       LHLD KEY   ;запись нач.адреса в HL
       JMP START  ;переход на начало программы
 TITR: DB 1FH,18H,18H,18H,18H,18H,'<=АДРЕС',1BH,59H,20H,50H
       DB 'П Р О Г Р А М М А',1BH,59H,22H,51H,'= Ш Р И Ф Т ='
       DB 1BH,59H,28H,3FH,'КЛАВИШИ',1BH,59H,29H,3FH
       DB 'УПРАВЛЕНИЯ:'
       DB 1BH,59H,2BH,3FH,'<- УМЕНЬШЕНИЕ АДРЕСА',1BH,59H,2CH
       DB 3FH,'-> УВЕЛИЧЕНИЕ АДРЕСА',1BH,59H,2DH,3FH
       DB 'ТАБ - БЫСТРО/МЕДЛЕННО',1BH,48H,0

 ; подпрограмма опроса клавиатуры

 START: CALL 0F81BH ;опрос клавиатуры
        CPI 8            ;клавиша "<-" ?
        JZ LEW           ;подпрограмма сдвига влево
        CPI 18H          ;клав. "->" ?
        JZ PRAW          ;подпрограмма сдвига вправо
        CPI 9            ;клавиша "ТАБ" ?
        CZ TURBO         ;подпрограмма ускоренного сдвига
        JMP START        ;сканирование клавиатуры

 ; подпрограмма сдвига вправо

 PRAW: LXI D,0C810H ;начальный адрес экрана
       LDA TUR
       CPI 0
       CNZ MP
       INX H
       SHLD KEY     ;запомним указатель адреса
       CALL ZNAK
       LHLD KEY
       JMP DISPL

 ; ускоренное перемещение указателя вправо

 MP:  MVI C,9
 MP1: INX H
      DCR C
      JNZ MP1
      RET

 ; подпрограмма сдвига влево

 LEW: LXI D,0C810H  ;нач. адрес экрана
      LDA TUR
      CPI 0
      CNZ ML
      DCX H
      SHLD KEY          ;запомним указатель адреса
      CALL ZNAK
      LHLD KEY
      JMP DISPL

 ; ускоренное перемещение указателя влево

 ML:  MVI C,9
 ML1: DCX H
      DCR C
      JNZ ML1
      RET

 ; подпрограмма вывода знакоместа на экран

 ZNAK:MVI B,10H
 DATA:MOV A,M
      MVI C,8
 SDW: RLC               ;сдвиг побайтно
      CC ZAP1           ;выводим квадрат
      CNC ZAP2          ;пусто
      DCR C
      JNZ SDW           ;след. бит
      INX H             ;след. ячейка
      INR D
      MVI E,10H
      DCR B             ;уменьшаем счетчик
      JNZ DATA          ;след. байт
      RET
 ZAP1:PUSH B
      XCHG
      MVI C,7           ;счетчик
 ZAP11:MVI M,0FEH
      INR L
      DCR C
      JNZ ZAP11
      MVI M,0
      INR L
      XCHG
      POP B
      RET
 ZAP2:PUSH B
      XCHG
      MVI C,8
 ZAP21:MVI M,0
      INR L
      DCR C
      JNZ ZAP21
      XCHG
      POP B
      RET

 ; подпрограмма вывода адреса на дисплей

 DISPL:LDA KEY+1
       CALL 0F815H
       LDA KEY
       CALL 0F815H
       MVI C,0DH
       CALL 0F809H
       JMP START

 ;установка/снятие признака режима TURBO

 TURBO:LDA TUR
       CMA
       STA TUR
       RET

 KEY:  DW 100H
 TUR:  DB 0

 ;конец исходного текста

 После трансляции программы и перевода ее по рабочему адресу  реко-
мендуется выгрузить ее директивами IШРИФТ и W9200,934Е на магнитную
ленту и использовать в формате Монитора.
 Для начала можно просмотреть знакогенератор  "Монитора-отладчика".
Он находится с адреса F300Н. Двигаться  по  ячейкам памяти  можно в
любом направлении, т.е. при движении влево после адреса 0000Н будет
адрес FFFFН и т.д.

                                             Лебедев Н.Г.,п.Вожгалы



               А знаете ли вы ?
                                

                "SPACE DEMON"

  Ваша задача управляя космическим  истребителем  выжить, отбивая
атаки чудовищ и другой твари. В ходе игры  появляются  птицы, ко-
торые несут в своих лапах дополнительное оружие или призовые очки

Shot  - Усиление огневой силы.
Magic - Образования защитного шара, который вращается  вокруг ко-
рабля и уничтожает всех врагов попавщихся ему на пути.
Score - Призовые 500 очков
* При гибели все ранее набранное оружие отбирается.
* При наборе 10000 очков прибавляется жизнь.

  Всего в игре шесть зон.

   1. Good Luck  (практика)
   2. Danger Zone
   3. Crazy Mytants
   4. Space Snake
   5. War Zone
   6. Space Demon

P.S. Проходя последню зону вы должны долго  упорно стрелят в кос-
мического демона и только тогда добьетесь победы.
 Кл. "СТР"-пауза. Кл. "ПРОБЕЛ"- отмена паузы.

                 "POLY GAME"

  Эта  игра  включает в себя четыре известные  вам  игры: Tetris,
Columns,Пентикс,Крестики.Можно выбрать любую  из  игр. Для  этого
вам нужно нажать клавишу "АР2" и вверху появиться меню в  котором
и можно выбрать нужную вам игру. Также можно играть  вдвоем. Кла-
виши первого игрока  стрелки, второго "Ш","Щ","Z" и кл. "ПРОБЕЛ".
При игре вам мещает жучек, которого не стоит придавлять  фигурой,
потому что это кончится плачевно. Но можно играть и без него.

Так же в игре возможно:

 * выбор уровня сложности
 * выбор подсказки
 * 1 или 2 игрока
 * выбор игры
 * выбор помех
 * усложнение игры и другое.

 При игре вдвоем собранные полные вами строки переходят  другому,
только в "разбитом" виде. Это повышает трудность и интерес к игре
такой вариантт возможен только при игре в "tetris" в других  слу-
чаях этого не происходит.
"Пентикс"- это игра аналогична игре "tetris" только  более  слож-
ными фигурами.

                                  Назаров А.Е. г.Киров 1993 г.
 		STAX	D
		MOV	A,M
		RAL	
		MOV	M,A
		INX	D
		DCR	B
		JNZ	CARR1
		RET
;
MOVER:
		MOV	A,M
		STAX	D
		INX	D
		DCR	L
		DCR	C
		JNZ	MOVER
		RET
		;
PBUF:		DW	0000
STK:		DW	0000
LINE:		DB	32
WORK:		DS	16
REG:		DB	6	;это номер графического режима
GRBUF:		DS	512
STACK		EQU	GRBUF+530
		END

    ѓ ѓ     —”””””„DA1 ѓ  ѓ  ѓ  ѓ
ѓ  R1    ѓ         ѓ ѓ     Љ27 35ѓ    ѓ  ѓ  ѓ  ^
ђ””««««””©         ѓ ѓ     —”””””„DA2 ѓ  ѓ  ѓ Beep
        Є””””””””””© ѓ     Љ28 34ѓ    ѓ  ѓ  ѓ
        ѓ5Є”’””’”Џ3  ѓ     —”””””„DA3 ѓ  ѓ  ѓ
        ђ”„CѓCTѓ1“”” ѓ     Љ29 33ѓ    ѓ  ѓ  ѓ
        14“”„2 ѓ ѓ2  ѓ     —”””””„DA4 ѓ  ѓ  ѓ Рис.2. Принципиальная
        Є”„Rѓ  ѓ2“”” ѓ     Љ30 32ѓ    ѓ  ѓ  ѓ электрическая   схема
        ‘ ѓ ѓ  ѓ ѓ6  ѓ     —”””””„DA5 ѓ  ѓ  ѓ муз.платы г.Омск  для
          ѓ ѓ  ѓ4“”””©     Љ31 31ѓ    ѓ  ѓ  ѓ компьютеров  "Вектор"
          ђ”‘””‘”©         —”””””„DA6 ѓ  ѓ  ѓ и "Криста-2".
            DD3            Љ32 30ѓ    ѓ  ѓ  ѓ
                           —”””””„DA7 ѓ  ѓ  ѓ
                           Љ02 40“””””„  ѓ  ѓ
                           —”””””„Ucc ѓ  ѓ  ѓ
                           Љ01  1ѓ    ѓ  ѓ  ѓ
                           —”x”””„GND ѓ  ѓ  ѓ
                             ‘   ђ””””‘””‘””©
                                      DD5

 DD1 K555ЛИ6                R1 330    R6 5.1 k   C1,C2 10.0x10в
 DD2 K555ИД7                R2 4.7 k  R7 4.7 k
 DD3 K555ИЕ7                R3 5.1 k  R8 10 k    ZQ1 14000 кГЦ
 DD4 K555ЛА3                R4 10 k   R9 10 k
 DD5 AY-3-8910 (YM-2149F)   R5 10 k

            Соответствие сигналов "Криста-2" и "Вектор-06Ц"

 Вектор 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20
 Криста 38 39 37 36 35 34 33 32 31 30 38 26 22 24 27 25 23 29 09 38

 Вектор 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40
 Криста 03 21 28 38 15 13 11 10 12 14 16 17 38 19 05 20 01 08 18 07

 Вектор 41 42 43 44 45
 Криста 04 38 06 39 38


 ри покупке или бесплатное предоставление  платы разработчикам
программного обеспечения.
 Пункт 14 введен из-за того, что российским пользователям не все равно
откуда получать заказанный сопроцессор.  Беларусь - другая республика,
а  значит более высокие почтовые тарифы, проблемы  с пересылкой денег,
более долгие сроки выполнения заказа.
 Окончательный  выбор вы сделаете, приобретя тот или  иной музыкальный
процессор. На сегодня вопрос стоит "что именно приобрести", а не "сто-
ит ли вообще приобретать", так как музыкальный процессор - будущее ва-
шего компьютера уже сейчас!

                    2. Новое ПЗУ для "Вектора-06Ц"
2.1. ПЗУ "Load Byte".
 В фирме "Байт" разработан  новый  загрузчик  - "Load Byte". Загрузчик
позволяет  осуществлять  загрузку программ с  магнитофона и дисковода.
Для пользователей  магнитофонной конфигурации "Вектора-06Ц" введен ряд
сервисных удобств:
 - вывод имени загружаемого файла на экран;
 - пометка начального  и конечного  блоков  на  экране;
 - возможность загрузки сбойных программ как в Copy-N4 (при сбое прог-
   рамма не сбрасывается, а продолжает грузиться. Ленту можно проматы-
   вать  вперед-назад и повторно грузить сбойные участки). Причем заг-
   рузчик сам определит, когда программа загрузится без ошибок ;
 - специальный маркер указывает на экране на текущий загружаемый блок;
 - возможность загрузки программы прямо с середины с выводом имени за-
   гружаемой программы на экран. Это значительно облегчит поиск нужной
   программы и ее ввод тем, кто пользуется магнитофонами без счетчиков;
 - действие клавиши УС сохраняется.
 Загрузчик зашит в  м/с ПЗУ РФ5 объемом 2  кбт. Прилагается инструкция
по замене м/с ПЗУ.

2.2. Внешнее ППЗУ.
 Практически готово внешнее ППЗУ объемом 64  кбт. Разработчик - Виктор
Саттаров. Внешне ППЗУ выглядит в виде готовой к работе платы, вставля-
емой в разъем ВУ вашего компьютера. Плата  имеет  ответный разъем  ВУ,
через который можно подключать другие внешние  устройства (контроллер,
квазидиск, муз.процессор). Плата при включении компьютера перехватыва-
ет управление и вы можете выбрать  любую из прошитых в ППЗУ  программ.
Содержимое ППЗУ  может формироваться по желанию  заказчика. Применение
ППЗУ резко облегчит  работу на компьютере. Такие популярные программы,
как Бейсик, Монитор-Отладчик, операционная  система, различные копиры,
будут всегда под рукой.
 лагается инструкция
по замене м/с ПЗУ.

2.2. Внешнее ППЗУ.
 Практически готово внешнее ППЗУ объемом 64  кбт. Разработчик - Виктор
Саттаров. Внешне ППЗУ выглядит в виде готовой к работе платы, вставля-
емой в разъем ВУ вашего компьютера. Плата  имеет  ответный разъем  ВУ,
через который можно подключать другие внешние  устройства (контроллер,
квазидиск, муз.процессор). Плата при включении компьютера перехватыва-
ет управление и вы можете выбрать  любую из прошитых в ППЗУ  программ.
Содержимое ППЗУ  может формироваться по желанию  заказчика. Применение
ППЗУ резко облегчит  работу на компьютере. Такие популярные программы,
как Бейсик, Монитор-Отладчик, операционная  система, различные копиры,
будут всегда под рукой.
 ”””””””””Ђ””‘””‘””‘””””‘”””””””””””””””

   Разряды D5,  D4  устанавливают режимы  обращения  к  старшему и
младшему байтам счетчиков канала (табл.3).

Кодирование разрядов D5, D4                     Таблица 3
””””’””””’”””””””””””””””””””””””””””””””””””””””””””””””””
 D5 ѓ D4 ѓ                Ф у н к ц и я
””””•””””•”””””””””””””””””””””””””””””””””””””””””””””””””
  0 ѓ  0 ѓ Перепись текущего кода счетчика канала в буфер-
    ѓ    ѓ ный регистр канала
  1 ѓ  0 ѓ Обращение к старшему байту счетчика
  0 ѓ  1 ѓ Обращение к младшему байту счетчика
  1 ѓ  1 ѓ Последовательное обращение сначала к младшему,
    ѓ    ѓ затем к старшему байтам счетчика канала
””””‘””””‘”””””””””””””””””””””””””””””””””””””””””””””””””

   Разряды D7, D6  - разряды  косвенной адресации к трем регистрам
управляющего слова, т.  е. они  определяют, в какой  из  регистров
управляющего слова, какого  канала будут записаны остальные управ-
ляющие разряды D5-D0 (табл.4).
                                     Практическую  релизацию
       Tаблица 4                  операций инициализации или
Кодирование разрядов D7, D6       настройки таймера рассмот-
””””’””””’””””””Ђ””””’””””’”””””” рим  на примерах.  Во всех
    ѓ    ѓНомер Љ    ѓ    ѓНомер  примерах примем, что адрес
 D7 ѓ D6 ѓканалаЉ D7 ѓ D6 ѓканала счетчика  канала 0  равен
””””•””””•””””””Ђ””””•””””•”””””” PORT53, все остальные ад-
  0 ѓ  0 ѓ   0  Љ  1 ѓ  0 ѓ   2   реса будем  записывать  в
  0 ѓ  1 ѓ   1  Љ  1 ѓ  1 ѓ   -   виде PORT53+i, где i - но-
””””‘””””‘””””””Ђ””””‘””””‘”””””” мер канала.

   Пример 1. Подпрограмма начальной  установки канала  0 (режим 5)
имеет вид:

TIME:   MVI     A,1AH   ;Канал 0, режим 5
        OUT     PORT53+3
        MVI     A,13H
        OUT     PORT53+3
        RET

   1AH=00011010B - режим двоичного счета, режим 5, канал  0, обра-
щение к младшему байту.
   13H - число, записываемое в младший байт счетчика.
   Если в счетчик необходимо загрузить двухбайтное число 1513Н, то
подпрограмма будет выглядеть следующим образом:

TIME:   MVI     A,3AH
        OUT     PORT53+3
        MVI     A,13H
        OUT     PORT53+3
        MVI     A,15H
        OUT     PORT53
        RET

   Пример 2. Подпрограмма начальной установки таймера:

   канал 0, режим 5, в счетчик загрузить 1513Н;
   канал 1, режим 1, в счетчик загрузить 06Н;
   канал 2, режим 5, в счетчик загрузить 0ВН имеет вид:

TIME3:  MVI     A,3AH
        OUT     PORT53+3
        MVI     A,52H
        OUT     PORT53+3
        MVI     A,9AH
        OUT     PORT53+3
        MVI     A,13H
        OUT     PORT53
        MVI     A,15H
        OUT     PORT53
        MVI     A,06H
        OUT     PORT53+1
        MVI     A,0BH
        OUT     PORT53+2
        RET

   52Н=01010010В - режим двоичного счета, режим  1, канал 1, обра-
щение к младшему байту;
   9AH=10011010B - режим двоичного счета, режим 5, канал  2, обра-
щение к младшему байту.

   Иногда по текущему значению числа в счетчике канала  необходимо
принимать какое-то  решение  в  программе.  Существует два способа
считывания микропроцессором числа, содержащегося  в счетчике.  При
первом способе  на время выполнения обычной операции "Чтение счет-
чика" внешней логикой  должна быть запрещена подача синхронизирую-
щих импульсов на данный канал таймера.
   В этом случае считывание осуществляется одной или  двумя коман-
дами в зависимости от разрядов D4, D5 ранее записанного  управляю-
щего  слова. Причем  при первом  считывнии  получаем  младший байт
счетчика (D4=D5=1), при втором - старший байт счетчика.

   Пример  3. Подпрограмма  чтения содержимого  счетчика  канала 0
(D4=D5=1):

TIME4:  MVI     A,01H   ;Программное отключение
        OUT     OTKL    ;синхроимпульсов таймера
        IN      PORT53  ;Получение младшего байта
        MOV     L,A     ;счетчика
        IN      PORT53  ;Получение старшего байта
        MOV     H,A     ;счетчика
        RET

   Второй способ считывания содержимого счетчика канала не наруша-
ет выполнение счета в канале.

   Пример  4. Подпрограмма чтения содержиого счетчика канала 0 без
нарушения счета в канале:

TIME5:  MVI     A,XX00XXXXB
        OUT     PORT53+3
        IN      PORT53
        MOV     L,A
        IN      PORT53
        MOV     H,A
        RET

   XX00XXXXB - управляющее слово, записываемое в регистр управляю-
щего слова, причем D4=D5=0, а вместо Х указываются те значения би-
тов, которые были записаны при инициализации канала 0.

   (взято из книги В.Г.Майоров, А.И.Гаврилов "ПРАКТИЧЕСКИЙ
    КУРС ПРОГРАММИРОВАНИЯ МИКРОПРОЦЕССОРНЫХ СИСТЕМ")


  Генерация случайных чисел с помощью микросхемы таймера
 ””””””””””””””””””””””””””””””””””””””””””””””””””””””””

   Поскольку регистр счетчика канала таймера перезагружается снова
и снова данным числом (а в промежутках идет счет вниз до 0), выбе-
рите в качестве загружаемого в счетчик значисло, равное требуемому
диапазону случайных чисел.
   Лучше всего использовать  режим 3  канала  микросхемы  таймера.
Сначала установите для счетчика желаемый диапазон случайных чисел.
Затем, чтобы получить  из канала случайное число, надо подать  ко-
манду  командному  регистру микросхемы  таймера перенести  текущее
значение счетчика в регистр "задвижки", для чего надо сбросить би-
ты D4 и D5. Этот перенос в регистр задвижки не мешает продолжающе-
муся счету. Затем  установите  биты  D4 и  D5 командного регистра,
чтобы процессор мог  читать из  регистра задвижки. После этого две
инструкции IN дадут  сначала младший,  а затем старший байт. Нако-
нец, восстановите первоначальное значение регистра задвижки, чтобы
счет продолжался в пределах указанного диапазона времени.



                Создание звуковых эффектов
               ””””””””””””””””””””””””””””

   Звуковые эффекты обычно достигаются непрерывным изменением час-
тоты тона. Все должно  быть сконстуировано  из чистых  музыкальных
тонов, а это значит, что эффект дисторции звука должен достигаться
за счет такого быстрого изменения тона, что ухо не успевает разде-
лить тона. Например, душераздирающее "чирикание"  может быть полу-
чено при быстром переключении между одним и тем  же тоном, отстоя-
щим на несколько октав.
   При  изменении частоты всего на несколько герц  получаем вибра-
цию.
   Другой метод заключается  во вложении  плавно  меняющихся тонов
внутрь последовательности, которая сама "гуляет" по частотам вверх
и вниз. Этот метод применяется во многих играх с лабиринтами.
  100 FOR I=1 TO 10                число повторений
  110 FOR J=1 TO 6                 число разных октав
  120 PLAY "mbl64t255O=j;ba#ag#gf#feb#de#cc#dd#eff#gg#aa#b"
  130 NEXT J
  140 NEXT I
   Ассемблер кроме всего прочего  позволяет генерировать  нечистые
тона, когда интервал, в течение которого динамик включен, не равен
интервалу, в течение которого он выключен. Такое нарушение симмет-
рии может приводить к жужжащим и брякающим звукам. Когда отношение
этих  интервалов  составляет,  скажем, 50 к 1,  получаем жужжание.
Если увеличить отношение еще в 10 -  20 раз, то жужжание переходит
в отдельные брякающие звуки. Этот эффект достигается в ВЕКТОРЕ при
помощи нулевого бита порта 01H, отвечающего за вывод на МГ.
   Итак, звук можно генерировать двумя  способами: с  помощью мик-
росхемы таймера и с помощью порта 01H. Aссемблер  позволяет соеди-
нить два способа генерации звука, что создает имитацию одновремен-
ной генерации двух разных звуков. Интерференция этих двух сигналов
приводит  к сложной форме звуковой  волны. Каждый  из  двух звуков
имеет  меньшую  громкость, поэтому в результате получается  скорее
жужжание, чем два разных голоса. Этот прием реально полезен только
для создания звуковых эффектов.



             Цифровой синтез музыкальной шкалы
            ”””””””””””””””””””””””””””””””””””

   Не  вдаваясь в подпробности  строгого  математического  анализа
предложенного метода, покажем на конкретном примере его практичес-
кую  направленность. Установим коэффициенты деления делителей час-
тоты каждой ступени шкалы частот самой верхней октавы в соответст-
вии с выражением

    Kj = (10(2^(1/12))^-j,                            (1)

где j - порядковый номер ступени шкалы частот;
    n - целое число, определяющее требуемую точность форми-
        рования.

                                               Таблица 5
”””’”””””””””””””’””””””””’””””””””’”””””””””””’”””””””””””
   ѓ             ѓ        ѓ        ѓЗначения поѓНаименов.
 j ѓ(2^(1/12))^-jѓ   Kj   ѓ   fj   ѓмузыкальнойѓ  тона
   ѓ             ѓ        ѓ        ѓ шкале, Гц ѓ
”””•”””””””””””””•””””””””•””””””””•”””””””””””•”””””””””””
 1 ѓ      2      ѓ    3   ѓ   4    ѓ      5    ѓ    6
”””•”””””””””””””•””””””””•””””””””•”””””””””””•”””””””””””
 0 ѓ  1,0        ѓ  10000 ѓ 440    ѓ    440    ѓ ЛЯ   [1]
 1 ѓ  0,9438743  ѓ   9438 ѓ 466,2  ѓ           ѓ ЛЯ   [1]
 2 ѓ  0,8908987  ѓ   8908 ѓ 493,93 ѓ    494    ѓ СИ   [1]
 3 ѓ  0,8408904  ѓ   8408 ѓ 523,31 ѓ    523    ѓ ДО   [2]
 4 ѓ  0,7937011  ѓ   7937 ѓ 554,36 ѓ           ѓ ДО   [2]
 5 ѓ  0,7491540  ѓ   7491 ѓ 587,97 ѓ    588    ѓ РЕ   [2]
 6 ѓ  0,7071070  ѓ   7071 ѓ 622,25 ѓ           ѓ РЕ   [2]
 7 ѓ  0,6674204  ѓ   6674 ѓ 659,27 ѓ    660    ѓ МИ   [2]
 8 ѓ  0,6299609  ѓ   6299 ѓ 698,52 ѓ    698    ѓ ФА   [2]
 9 ѓ  0,5946038  ѓ   5946 ѓ 739,99 ѓ           ѓ ФА   [2]
10 ѓ  0,5612314  ѓ   5612 ѓ 784,03 ѓ    784    ѓ СОЛЬ [2]
11 ѓ  0,5297317  ѓ   5297 ѓ 830,65 ѓ           ѓ СОЛЬ [2]
12 ѓ  0,500000   ѓ   5000 ѓ 880    ѓ    880    ѓ ЛЯ   [2]
”””‘”””””””””””””‘””””””””‘””””””””‘”””””””””””‘”””””””””””
”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””

   Частота следования импульсов на выходе j-го делителя будет рав-
на:

                 fг
    fj = ””””””””””””””””””””                          (2)
          (102^(1/12))^-j

где fг - частота на выходе высокостабильного генератора.
   В качестве опорной частоты, соответствующей j=0, примем частоту
тока  Ля  первой  октавы,  имеющую  точное целочисленное  значение
fо=440 Гц.
   Ограничивая требуемую точность  формирования четырьмя значащими
цифрами после запятой (m=4), получим (в МГц):
    fг=fо10^4=4,4.
   Значения частот ступеней второй октавы  в порядке  возростания,
вычисленные в соответствии с выражением (2), приведены в табл. 1.
   В графе 5 даны округленные значения частот музыкальных тонов.
   Частоты на октаву выше можно получить,  удваивая эти  значения,
на две октавы выше - еще раз удваивая частоты. И наоборот, частоты
на октаву ниже равны приблизительно половине этих значений (хорошо
настроенное пианино точно не следует арифметическим интервалам).



                 Микропроцессор КР580ВМ80А
               ”””””””””””””””””””””””””””””

Система команд микропроцессора КР580ВМ80А        Таблица 6
”””””””””””’””””””””””’””””””””””””””””””””’”””””””””””””””
           ѓ          ѓ       число        ѓпризнак рез-та
  команда  ѓ   код    “””””””’””””””’””””””•””’””’””’””’”””
           ѓ операции ѓбайтовѓцикловѓтактовѓ Sѓ ZѓACѓ Pѓ CY
”””””””””””•””””””””””•””””””•””””””•””””””•””•””•””•””•”””
 ACI DATA  ѓ 11001110 ѓ   2  ѓ   2  ѓ   7  ! +! +! +! +! +
 ADC R/M   ѓ 10001R/M ѓ   1  ѓ  1/2 ѓ  4/7 ! +! +! +! +! +
 ADD R/M   ѓ 10000R/M ѓ   1  ѓ  1/2 ѓ  4/7 ! +! +! +! +! +
 ADI DATA  ѓ 11000110 ѓ   2  ѓ   2  ѓ   7  ! +! +! +! +! +
 ANA R/M   ѓ 10100R/M ѓ   1  ѓ  1/2 ѓ  4/7 ! +! +! U! +! 0
 ANI DATA  ѓ 11100110 ѓ   2  ѓ   2  ѓ   7  ! +! +! U! +! 0
 CALL ADDR ѓ 11001101 ѓ   3  ѓ   5  ѓ  17  ! -! -! -! -! -
 Ccnd ADDR ѓ 11CND100 ѓ   3  ѓ  3/5 ѓ 11/17! -! -! -! -! -
 CMA       ѓ 00101111 ѓ   1  ѓ   1  ѓ   4  ! -! -! -! -! -
 CMC       ѓ 00111111 ѓ   1  ѓ   1  !   4  ! -! -! -! -! +
 CMP R/M   ѓ 10111R/M ѓ   1  ѓ  1/2 !  4/7 ! +! +! +! +! +
 CPI DATA  ѓ 11111110 ѓ   2  ѓ   2  !   7  ! +! +! +! +! +
 DAA       ѓ 00100111 ѓ   1  ѓ   1  !   4  ! +! +! +! +! +
 DAD RS    ѓ 00RS1001 ѓ   1  ѓ   3  !  10  ! -! -! -! -! +
 DCR R/M   ѓ 00R/M101 ѓ   1  ѓ  1/3 !  5/10! +! +! +! +! -
 DCX RS    ѓ 00RS1011 ѓ   1  ѓ   1  !   5  ! -! -! -! -! -
 POP RP    ѓ 11RP0001 ѓ   1  ѓ   3  !  10  ! -! -! -! -! -
 POP PSW   ѓ 11110001 ѓ   1  ѓ   3  !  10  ! +! +! +! +! +
 PUSH RP   ѓ 11RP0101 ѓ   1  ѓ   3  !  11  ! -! -! -! -! -
 RAL       ѓ 00010111 ѓ   1  ѓ   1  !   4  ! -! -! -! -! +
 RAR       ѓ 00011111 ѓ   1  ѓ   1  !   4  ! -! -! -! -! +
 RET       ѓ 11001001 ѓ   1  ѓ   3  !  10  ! -! -! -! -! -
 Rcnd      ѓ 11CND000 ѓ   1  ѓ  1/3 !  5/11! -! -! -! -! -
 RLC       ѓ 00000111 ѓ   1  ѓ   1  !   4  ! -! -! -! -! +
 RRC       ѓ 00001111 ѓ   1  ѓ   1  !   4  ! -! -! -! -! +
 RST NUM   ѓ 11NUM111 ѓ   1  ѓ   3  !  11  ! -! -! -! -! -
 SBB R/M   ѓ 10011R/M ѓ   1  ѓ  1/2 !  4/7 ! +! +! +! +! +
 SBI DATA  ѓ 11011110 ѓ   2  ѓ   2  !   7  ! +! +! +! +! +
 SHLD ADDR ѓ 00100010 ѓ   3  ѓ   5  !  16  ! -! -! -! -! -
 SPHL      ѓ 11111001 ѓ   1  ѓ   1  !   5  ! -! -! -! -! -
 STA ADDR  ѓ 00110010 ѓ   3  ѓ   4  !  13  ! -! -! -! -! -
 STAX R    ѓ 000R0010 ѓ   1  ѓ   2  !   7  ! -! -! -! -! -
 STC       ѓ 00110111 ѓ   1  ѓ   1  !   4  ! -! -! -! -! 1
 SUB R/M   ѓ 10010R/M ѓ   1  ѓ  1/2 !  4/7 ! +! +! +! +! +
 SUI DATA  ѓ 11010110 ѓ   2  ѓ   2  !   7  ! +! +! +! +! +
 XCHG      ѓ 11101011 ѓ   1  ѓ   1  !   4  ! -! -! -! -! -
 XRA R/M   ѓ 10101R/M ѓ   1  ѓ  1/2 !  4/7 ! +! +! 0! +! 0
 XRI DATA  ѓ 11101110 ѓ   2  ѓ   2  !   7  ! +! +! 0! +! 0
 XTHL      ѓ 11100011 ѓ   1  ѓ   5  !  18  ! -! -! -! -! -
 DI        ѓ 11110011 ѓ   1  ѓ   1  !   4  ! -! -! -! -! -
 EI        ѓ 11111011 ѓ   1  ѓ   1  !   4  ! -! -! -! -! -
 HLT       ѓ 01110110 ѓ   1  ѓ   1  !   7  ! -! -! -! -! -
 IN PORT   ѓ 11011011 ѓ   2  ѓ   3  !  10  ! -! -! -! -! -
 INR R/M   ѓ 00R/M100 ѓ   1  ѓ  1/3 !  5 10! +! +! +! +! -
 INX RS    ѓ 00RS0011 ѓ   1  ѓ   1  !   5  ! -! -! -! -! -
 JMP ADDR  ѓ 11000011 ѓ   3  ѓ   3  !  10  ! -! -! -! -! -
 Jcnd ADDR ѓ 11CND010 ѓ   3  ѓ   3  !  10  ! -! -! -! -! -
 LDA ADDR  ѓ 00111010 ѓ   3  ѓ   4  !  13  ! -! -! -! -! -
 LDAX R    ѓ 000R1010 ѓ   1  ѓ   2  !   7  ! -! -! -! -! -
 LHLD ADDR ѓ 00101010 ѓ   3  ѓ   5  !  16  ! -! -! -! -! -
LXI RS,DATAѓ 00RS0001 ѓ   3  ѓ   3  !  10  ! -! -! -! -! -
MOV R/M,R/Mѓ 01R/MR/M ѓ   1  ѓ  1/2 !  5/7 ! -! -! -! -! -
MVI R/M,DATѓ 00R/M110 ѓ   2  ѓ  2/3 !  7/10! -! -! -! -! -
 NOP       ѓ 00000000 ѓ   1  ѓ   1  !   4  ! -! -! -! -! -
 ORA R/M   ѓ 10110R/M ѓ   1  ѓ  1/2 !  4/7 ! +! +! 0! +! 0
 ORI DATA  ѓ 11110110 ѓ   2  ѓ   2  !   7  ! +! +! 0! +! 0
 OUT PORT  ѓ 11010011 ѓ   2  ѓ   3  !  10  ! -! -! -! -! -
 PCHL      ѓ 11101001 ѓ   1  ѓ   1  !   5  ! -! -! -! -! -
”””””””””””‘””””””””””‘””””””‘”””””””””””””””””””””””””””””
Примечания:

Ccnd обозначает группу команд CNZ,CZ,CNC,CC,CPO,CPE,CP,CM
Rcnd обозначает группу команд RNZ,RZ,RNC,RC,RPO,RPE,RP,RM
Jcnd обозначает группу команд JNZ,JZ,JNC,JC,JPO,JPE,JP,JM

 Состояние  признака результата указывается следующим образом: "+"
-  признак устанавливается в 1  или 0 в зависимости  от результата
выполнения команды; "-" -  признак не  изменяется;  U  признак  не
определен.

 В команде MOV R/M,R/M первый  и второй операнды не должны опреде-
лять имя ячейки памяти одновременно.
2
 
