Документ-3,Луппов Г.Б.,Киров,клавиЌи управления-УС,СС.

                           ЄЏ
                           ЄЏ
         Є”””””Џ Є”””””Џ Є”«© Є”Џ Є”””””Џ       Є”””””Џ  Є”””Џ
        ««««««”©«««««« ѓ«« ѓ «« ѓ««««««”©      «««««« ѓ «««« ѓ
        «« ђ”””Џ«« ђ«« ѓ«« ѓ««« ѓ  «« ѓ   Є”””Џ   Є««”©   «« ѓ
        «««««« ѓ«««««« ѓ«« «Є«« ѓ  «« ѓ  ««««”©  ««”•”Џ   «« ѓ
        «« ђ«« ѓ«« ѓ«« ѓ«««Є©«« ѓ  «« ѓ         Є””«« ѓ  Є«« ђ”Џ
        ««««««”©««”©««”©««”© ««”©  ««”©        ««««««”© ««««««”©

      ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬
     Є”””””””””””””””””””””””””””””””””””””””””””””””””””””””””Џ«
     ѓ                       Центр "Байт"                      ѓ«
     ѓ                610031, г.Киров-31, а/я 2629             ѓ«
     ѓ                 Луппов Григорий Борисович               ѓ«
     ѓ       Информационно-рекламный выпуск центра "Байт"      ѓ«
     ђ”””””””””””””””””””””””””””””””””””””””””””””””””””””””””©

     Є”””””””””””””””””””””””””””””””””””””””””””””””””””””””””Џ
     ѓ  Adventure Games       Окончание          Гуменюк Н.В.  ѓ
     ђ”””””””””””””””””””””””””””””””””””””””””””””””””””””””””©

                            2. База данных.
        Адвентюрная игра сожержит в себе определенную базу данных, ку-
да помещен набор слов, которые программа понимает. Сюда обычно  входят
глаголы, существительные, прилагательные  и наречия.  Последние  испо-
льзуются довольно редко. Самые простые адвентюрные программы  понимают
примерно 150-200 слов, а соверЌенные более 600-800. В  программе может
быть одна центральная база, куда помещены  все допустимые  слова, либо
она разбивается на части. Каждая  часть своим набором слов подгоняется
под разные  ситуации в игре, то есть набор слов меняется в зависимости
от текущей сцены  ВаЌего сюжета.  Второй способ требует больЌе памяти,
но он гибче. В программе "Adventure Game" база организована так:
 250 DATA "C","Ю","З","В","ИДТИ","О","ОСМО","ЕСТЬ","ПИТЬ","ПРОВ",
     "ВЗЯТ","ПОЛО","БЕЖА","ОТКР","ЗАКР","ПОДН","СПУС","АТАК"
 260 DATA "СКАЗ","ПРОЧ","ПОТЕ","БРОС","ПОПР","И","ИНВЕНТАРЬ","LOAD",
     "SAVE","ОТДА","ПОДУ","ЌELP","ПОМО","ПОТЯ","СМАЗ","НАЖА"
 270 DATA "ПОСТ","ЖДАТ","Ж","ВЫХО"
        Как видно из примера в базе находятся  только глаголы и коман-
ды. Существительные помещены в строках условий.  Многие  заметили, что
глаголы и команды отсечены до первых 4 букв. Это  можно объяснить тем,
что для  анализа  и распознавания  вводимой информации вовсе не обяза-
тельно хранить полные слова. Распознавание может вестись, например, по
первым или последним 3-4  символам. Методов анализа строковых перемен-
ных довольно много,  но в любом случае, чем  больЌе  набор  понимаемых
слов, тем больЌе символов оставляют в словах.
                3. Игровое пространство и перемещение.
        По всей видимости сюжет уже придуман, теперь нужно разработать
игровое  пространство, где  будут разворачиваться  все действия  ВаЌей
игры. Распланируем игровое поле. Делается это весьма простым способом.
На  листе бумаги  чертится квадрат и делится на клетки.  Каждая клетка
будет соответствовать одной локации. Под локациями понимают  те места,
где может побывать  главный герой ВаЌей игры, то  есть те места,  куда
можно пойти.  Например, ВаЌе  игровое поле содержит 100 локаций, таким
образом заводим массив DIM A(10,10). Игровое поле не обязательно долж-
но иметь строго квадратную форму, это предстоить реЌать Вам. Какое по-
ле выбрать?  Это зависит от величины проектируемой программы, ее слож-
ности, разнообразия сюжета.
        В "Adventure Games" принято игровое поле более, чем на 60  ло-
каций. Ниже  привожу пример программы, которая использует игровое поле
10*10.
 10 DIM A(10,10)
 20 FOR I=1 to 10: FOR J=1 TO 10: READ A(I,J): NEXT J: NEXT I
 30 DATA 00,10,14,06,02,02,02,02,02,02
 40 DATA 02,09,15,13,05,09,13,15,13,05
 50 DATA 12,11,05,02,00,00,00,12,11,04
 60 DATA 09,11,11,13,04,00,00,03,00,00
 70 DATA 00,00,00,08,04,00,00,01,08,04
 80 DATA 08,11,14,04,00,02,00,10,11,06
 90 DATA 00,10,07,00,00,03,00,03,00,03
100 DATA 00,01,03,00,00,03,00,03,00,03
110 DATA 08,11,05,00,00,03,00,03,00,01
120 DATA 00,00,00,00,00,09,11,05,00,00
        Из строки  20 видно,  что массив  заполняется  числами.  Таким
образом мы задаем карту игры. Как правило в адвентюрных играх не всег-
да  можно попасть  на  любую локацию,  так как путь преграждают двери,
овраги, пропасти и т.п. Мы должны определить для каждой локации,  куда
из нее можно попасть. Другими словами,  в каком  направлении разреЌено
перемещение, а в каком - нет. Число позволяют пометить каждую локацию.
 0 - выход во всех направлениях закрыт
 1 - можно идти только на восток
 2 - можно идти только на запад
 3 - можно идти только на север
 4 - можно идти только на юг
 5 - можно идти только на восток и запад
 6 - можно идти только на восток и север и т.д.
        Определяются  все комбинации возможных  направлений  движения.
Конечно, если использовать еще и промежуточные направления сторон све-
та, такие  как: северо-восток, юго-запад  и т.п., возможных комбинаций
будет довольно много. Для начала лучЌе ограничить движение героя четы-
рьмя сторонами света, то есть он может ходить только на север, юг, за-
пад и восток.
        Надо заметить, что в адвентюрных играх зачастую приходится пе-
ремещаться вверх и вниз. Например, в  "Adventure Game"  имеется четыре
этажа в замке Фридера. Лестницы помечаются так же числами. Все переме-
щения вверх и  вниз можно  сделать,  если завести  несколько массивов.
Один массив, скажем, будет соответствовать подземным пещерам, а второй
- поверхности  земли. Пока герой  путеЌествует  по пещерам,  программа
использует один  массив, а  как  выберется  на  поверхность, программа
возьмет другой массив. Можно,  конечно, сделать все  в одном  массиве,
разделив его на две части и более.  После всего  этого разрабатывается
специальная программа, которая позволяет герою перемещаться  в игровом
пространстве в соответствии с кодировкой массива. Так же прописывается
программа, которая обрабатывает этот массив. Дело в том, что после то-
го как главный герой открывает/закрывает двери, окна и т.п. соответст-
венно открываются/закрываются  пути  в те  или иные локации. Программа
должна отслеживать  такие действия героя игры и соответственно  менять
числа в массиве.
        Описываем локации. Для того, чтобы  пользователь, работающий с
ВаЌей  программой, мог мысленно  представить,  где  сейчас  находиться
главный  герой игры, каждая локация описывается в соответствии с ВаЌим
сюжетом.
        Например:
 1. Вы находитесь на ясной поляне, заросЌей густой зеленой травой.
 2. Вы находитесь возле одинокого дуба.
 3. Вы стоите у подножия высокой каменной скалы.
        Советую не увлекаться слиЌком длинными и детальными описаниями
-  это повлечет  расточительный  расход свободной  памяти.  Достаточно
двух-четырех  строк. Если  Вам нравиться работать с графикой, то можно
на некторые  локации сделать маленькие картинки и выводить их на экран
совместно с текстовым описанием или без него. Но я считаю, что графика
в адвентюрных играх - это излиЌество,  которое ведет к дополнительному
расходу памяти. Тем более графика, как это обычно бывает, не отобража-
ет действительное положение  в игровом пространстве. Например, нарисо-
ван стол,  а на нем стоит ваза, хотя на  самом деле, возможно, вазу Вы
уже давно унесли из этой локации, а  на картинке она присутствует. Та-
кие  ситуации  введут в заблуждение любого пользователя, который будет
общаться с  ВаЌей программой.  При  описании локаций следует учитывать
то, что  все стены, двери  и проходы замков и домов вписываются как бы
разделителями  между клетками на ВаЌем игровом  поле. На все выЌе опи-
санное нет никаких стандартов, и каждый вправе сделать что-то по-свое-
му, найти лучЌий вариант реЌения тех или иных задач.
                    4. Анализ вводимой информации.
        Здесь надо определиться,  как ВаЌа программа будет  анализиро-
вать  и распознавать  вводимые  пользователем команды  для  управления
игрой. На Бейсике для этих целей можно применять: LEFT$, RIGЌT$, MID$.
Все это позволит работать со строковыми переменными. Предлагаю простую
программу для анализа введенной команды по первым четырем символам.
 10 INPUT A$: REM ВВОД КОМАНДЫ
 20 B$=LEFT$(A$,4): REM ОТСЕКАЕМ ПЕРВЫЕ ЧЕТЫРЕ СИМВОЛА
 30 FOR I=1 TO 5: REM К ПРИМЕРУ У ВАС ПЯТЬ КОМАНД
 40 READ C$: REM ЧИТАЕМ КОМАНДУ ИЗ БАНКА СЛОВ
 50 DATA "ИДТИ","ОСМО","БЕЖА","ЕСТЬ","ПИТЬ": REM БАНК СЛОВ
 60 IF B$=C$ TЌEN ON I GOSUB 100,200,300,400,500:GOTO 10: REM
    СРАВНИВАЕМ ВВЕДЕННУЮ КОМАНДУ С КОМАНДОЙ ИЗ БАНКА СЛОВ, ВЫЗЫВАЕМ
    СООТВЕТСТВУЮЩУЮ ПОДПРОГРАММУ. ЗАПУСКАЕМ ПРОГРАММУ.
 70 NEXT I
 80 PRINT "КОМАНДА ОТСУТСТВУЕТ В БАНКЕ СЛОВ"
 90 GOTO 10
100 П/П КОМАНДЫ "ИДТИ"
200 П/П КОМАНДЫ "ОСМОТРЕТЬСЯ"
300 П/П КОМАНДЫ "БЕЖАТЬ"
400 П/П КОМАНДЫ "ЕСТЬ"
500 П/П КОМАНДЫ "ПИТЬ"
        В строки 100, 200, 300, 400, 500 можно  будет подставить соот-
ветствующие п/п, которые будут  отрабатывать  вводимые команды. Пример
использует оператор INPUT, что,  конечно, не  очень  удобно,  так  как
программа лиЌается возможности работать  в реальном времени. Если ввод
информации сделать через INKEY$ можно обойти этот недостаток.  При ра-
боте  в реальном масЌтабе времени легко  сделать, чтобы персонажи игры
перемещеались независимо от того,  вводите ли Вы комнады или  нет. Это
максимально приблизит ВаЌу программу к  реальности и значительно нака-
лит обстановку  в такой хотя бы ситуации, как  бой персонажей игры. Но
об этом попозже.
                        5. Работа с объектами.
        Адвентюрные  игры в больЌинстве случаев насыщены всевозможными
предметами. Предметы  можно проверять, брать с собой,  носить, класть,
отдавать другим персонажам, забирать,  использовать  и  многое другое.
Для  всех этих операций, естественно, подбираются  соответствующие ко-
манды. Например:  взять  ключ, положить меч, завести часы  и т.д. Если
взять массив,  аналогичный тому,  который  использовали  для  игрового
пространства, то можно с помощью него организовать проверку на наличие
предмета в той или иной локации. Помечать локации можно так:
 0 - предметов нет
 1 - лежит меч
 2 - лежит книга
 3 - лежит ключ
 4 - лежит меч и книга и т.д.
        Прописываются все возможные комбинации. Предметы можно перено-
сить из локации в локацию, исходя из этого необходимо, чтобы программа
обрабатывала  массив. Метод не удобен тем, что даже при незначительном
количестве предметов, возможных комбинаций становится очень много.
                   6. Работа с другими персонажами.
        Другие персонажи - вот главная возможность  сделать ВаЌу  игру
единственной  и  неповторимой, в своем роде,  особенно,  если  простое
блуждание по пещерам и замка наводит на Вас  тоску. Подумайте, есть ли
другие какие-нибудь игры, которые позволяют общаться  главному герою с
другими персонажами. Персонажи не просто прыгают с локации на локацию,
они перемещаются строго по свободным путем. Например,  взять  хотя  бы
"Adventure  Game". Если  какого-нибудь  персонажа запереть в  комнате,
отрезав ему пути выхода закрытыми дверями, то он там так и останется и
не выйдет,  пока  ему не откроют  дверь. Что же другие персонажи могут
делать? Они могут:
1. Независимо от Вас перемещаться  по свободным путям в игровом прост-
ранстве.
2. Вести с Вами диалог, поддерживая вес словарный запас, который пони-
мает программа.
3. Помогать Вам своими советами.
4. Дарить Вам полезные предметы.
5. Переносить предметы.
6. Помогать Вам своими действиями.
7. Искать и собирать предметы.
8. Иметь свой характер.
9. Быть вредными и агрессивными.
        Чем больЌе пунктов удасться реализовать в своей программе, тем
она будет интереснее. Практически можно сделать так, что другие персо-
нажи будут уметь делать все, что умеете делать Вы. Вот  здесь и прояв-
ляется основное достоинство программы,  работающей в реальном времени.
Программа безостановочно работает, соответственно все другие персонажи
постоянно перемещаются, с  каждой  секундой создавая все более и более
непредсказуемую ситуацию для игрока.
        Программа, отвечающая за действия  персонажей, работает анало-
гично  той, которая  управляет главным героем игры. Она может работать
примерно так. Пример довольно условный, но он  позволит  хоть  немного
представить, как работают программы, отвечающие за перемещение главно-
го героя и других персонажей адвентюрной игры.
1. Проверяется,  какое  число стоит в локации  массива игрового прост-
ранства. Например, 1 - выход  из  локации возможен  только  в северном
направлении. Если возможных  выходов больЌе, то  вызываем определенную
подпрограмму, которая через RND выберет направление.
2. Персонаж переходит в новую локацию. Проверяется, есть ли в этой ло-
кации кто-гибудь еще. Если да,  то определяется главный ли  это герой.
Если снова  да, то персонаж выжидает определенное время в надежде, что
Вы что-нибудь скажете или сделаете. Если это не главный герой,  то мо-
жет произойти обмен предметами или что-нибудь еще.
3. Происходит повторный расчет направления движения. Все повторяется.
                        7. Атрибуты персонажей.
        В адвентюрной программе всех персонажей  можно наделить своими
характерами и характеристиками. Характер, например, может включать три
атрибута:  честность,  доброту,  жадность.  Характеристика,  допустим,
включает: силу  персонажа и  его  защитную энергию. Количество  взятых
атрибутов  условно.  Одним словом  на каждого персонажа  мы взяли пять
атрибутов.
 Создаем пять переменных:
А - честность (1-да, 0-нет)
B - доброта   (1-да, 0-нет)
С - жадность  (1-да, 0-нет)
D - сила      (от 1 до 3)
F - защитная энергия (от 1 до 3)
        Попробуем определить значения  переменных: А=1, В=1, С=1, D=3,
F=2. Персонаж получился честный,  добрый, жадный, сильный и со средней
защитной энергией.
1. Если персонаж честный, то он всегда говорит правду.
2. Доброта позволит ему не атаковать других персонажей при встрече.
3. Жадность не позволит ему отдавать свои предметы.
4. Сила даст ему возможность переносить сразу три предмета. (Вес пред-
мета равен одной условной  единицы силы персонажа). Предмет взял, сила
уменьЌилась на единицу.
5. Защитная  энергия  поможет ему  выдержать две атаки,  которые может
провести главный герой.
        На атрибуты могут влиять различные факторы, например:
1.  Если персонаж взял предмет, то сила уменьЌается на 1, а если поте-
рял,  то увеличивается на  1. Нельзя переносить более  трех предметов,
так как сила равна 3. Силу можно увеличить на 1, если съесть бутерброд
ил яблоко.
2. Персонажа  атаковали - защитная энергия уменьЌилась на 1, а доброта
установилась в  0,  то есть он  становится злым. Если защитная энергия
падает до 0, то персонаж погибает.
3. Персонажу подарили предмет. Доброта устанавливается в 1, то есть он
становится добрым. Его сила уменьЌается на 1. Если сила  в 0, то пред-
мет брать нельзя.
               8. Использование отгрузки состояния игры.
        Так как адвентюрные игры практически невозможно пройти за один
раз, в них  предусматривается отгрузка  состояния игры. Если программа
не  имеет таковой, то  она  считается несерьезной.  Поэтому желательно
предусмотреть данный пункт.
                          9. Полезные советы.
1. Адвентюрная программа требует для своего создания очень тщательного
и кропотливого планирования, иначе программа станет настолько запутан-
ной и непонятной, что в ней будет очень трудно разобраться.
2. Прежде чем вводить в проект будущей  программы  атрибуты персонажа,
подумайте. Может для начала стоит от них отказаться.
3. Если Вы сомневаетесь, хватит ли Вам свободной памяти, то лучЌе сра-
зу упростить сюжет и ограничиться малым.
4. Неплохих  результатов можно  добиться,  если  в  течение некоторого
времени  поиграть в адвентюрные программы на ПК  "ZX-SPECTRUM". Напри-
мер, The Ќobbit, Sherlock, Aftershock, Spellbound,  Worn in Paradise и
т.п. Это будет хороЌим и наглядным примером для подражания.
5. Если возникнут вопросы, связанные с созданием адвентюрных программ,
Вы  можете написать по адресу: 662793,  г.Саяногорск, 5-72-36, Гуменюк
А.В. (автору "Adventure Game").

     Є”””””””””””””””””””””””””””””””””””””””””””””””””””””””””Џ
     ѓ  Вечная жизнь                             Самойлов С.А. ѓ
     ђ”””””””””””””””””””””””””””””””””””””””””””””””””””””””””©

 СРАЖЕНИЕ. Для  установки в программе "Сражение"  вечных жизней и нес-
кончаемого запаса патронов (черепков), нужно:
 а) загрузить и запустить программу "Сражение"
 б) нажать комбинацию клавиЌ УС+ВВОД+БЛК
 в) загрузить и запустить Монитор-отладчик (сразу по рабочим адресам)
 г) внести маленькие изменения:
     #A3188           #A3B2D
     3188 ORA A       3B2D RET
     3189 <F4>        3B2E <F4>
 д) после внесенных изменений можно запускать игру: #G100
 ДИЗЗИ. Для установки вечных жизней в программе "Диззи" (фирма "Элита"
город Астрахань), нужно:
 а) загрузить и запустить саму игру "Диззи"
 б) нажать комбинацию клавиЌ УС+ВВОД+БЛК
 в) загрузить  и  запустить Монитор-Отладчик  (загружающийся сразу  по
    своим рабочим адресам, см. Байт-2)
 г) внести в программу маленькие изменения:
    #A0D93
    0D93 ORA A
    0D94 <F4>
 д) запустить игру: #G100
 TERMINUS. Для установки вечных жизней в программе "Terminus" (если не
оЌибаюсь, то это программа  Сергеева А. из фирмы "Элита" г.Астрахань),
нужно:
 а) загрузить и запустить программу "Terminus"
 б) нажать комбинацию клавиЌ УС+ВВОД+БЛК
 в) загрузить и запустить Монитор-Отладчик (загружающийся сразу по ра-
    бочим адресам, см. Байт-2)
 г) внести в программу маленькие изменения:
    #A0348
    0348 ORA A
    0349 <F4>
 д) запустить программу: #G100.

