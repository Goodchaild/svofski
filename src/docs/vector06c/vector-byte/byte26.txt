¬¬¬¬¬¬  ®««ЇЇ  ЇЇЇ «««« ««««««« ««««­  ®«««ЇЇ­«« «  ®««­  ««««« ¬¬¬¬¬¬
ЃЃЃЃЃЃ®««««««­ ««« «««Ї «««­««® «««¬­  ®«««¬¬­Ї««Ї®««««««­«««¬  ЃЃЃЃЃЃ
ЇЇЇЇЇЇ  ®««­   ««« «««  «««­  ® ««« ­  ®«««¬¬­ ««   ®««­  «««¬¬ ЇЇЇЇЇЇ

                ¬««««¬ ««¬ ¬«Ї«« ¬««ЇЇ ¬«Ї«« ««Ї«¬ ««¬  ¬««ЇЇ
                ««  «« ««  ««ЇЇ   Ї««¬ ««ЇЇ  «« «« ««¬¬  Ї««¬
                «« ЇЇ  ЇЇ   ЇЇЇЇ ЇЇЇЇ   ЇЇЇЇ «« ЇЇ  ЇЇЇ ЇЇЇЇ
                ««                            «
  ¬ЇЇЇЇЇЇЇЇЇЇЇЇ «« ЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇ ® ЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇ¬
  ‚ "ВЕКТОР-06Ц"««    Информационно-рекламный выпуск "БАЙТ-26"    ‚
  Ѓ             ‚«                                                Ѓ
  ‚ "VECTOR-06C"Ѓ‚    610031, Киров-31, а/я 2629, Луппову Г.Б.    ‚
   ЇЇЇЇЇЇЇЇЇЇЇЇ ЂЃ ЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇ
                ЂЂ
                 Ђ
 ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬
 ѓ                продолжение. начало в номере 25                   ѓ
 ѓГуменюк Н.В.          Почта наших читателей             Саяногорскѓ
 ЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇ

 Для начала рассмотрим режим  "MAGNIFY"  (увеличение)  части картинки.
Это один  из самых важных режимов, т.к. рисование мелких деталей  кар-
тинки очень утомляет глаза, да и рисовать значительно труднее, поэтому
режим  увеличения просто необходим. Наберите небольшую  программу, за-
пустите ее и посмотрите как будет увеличено окно размером 11*11 точек.

10 CLS: COLOR 15,0
20 X=50: Y=5-: Z=101: H=101
30 PLOT 50,50,1: LINE 60,60,B: PLOT 53,52,2:
   LINE 1,1,BS: PRINT "S": PAINT 51,51,4,15
40 COLOR 10: FOR A=100 TO 210 STEP 10: PLOT A,100,1:
   LINE A,210: PLOT 100,A,1: LINE 210,A: NEXT A
50 FOR I=1 TO 121
60 PLOT X,Y,2: IF POINT(1)>0 THEN COLOR POINT(1):
   PLOT Z,H,1: LINE Z+8,H+8,BF
70 X=X+1: Z=Z+10: IF X=61 THEN X=50:Y=Y+1: Z=101: H=H+10
80 NEXT I

 Комментарий:
20 X,Y - нижний левый угол окна.
   Z,H - нижний левый угол первого прямоугольника.
         Из этих прямоугольников и строится увеличенное изображение.
30 Рисуем графику в окне
40 Устанавливаем цвет разделительной сетки. Сетка применяется для наг-
   лядного разделения прямоугольников в увеличенном фрагменте картинки
50 Задаем  цикл:  сколько  точек  нужно  увеличить  (в  нашем  случае
   11*11=121)
60 Через оператор POINT узнаем математический цвет точки в окне. Меня-
   ем цвет: COLOR POINT(1). Рисуем закрашенный прямоугольник:
   PLOT Z,H,1: LINE Z+8,H+8,BF. Этот прямоугольник  и есть увеличенная
   точка.
70 Проводим смещение вправо. Как в реальном окне, так и в увеличенном.
   Узнаем цвет точки, которая стоит правее и т.д. Пока не будет увели-
   чен весь нижний ряд в заданном окне, то есть 11 точек.
   Если ряд пройден, то поднимаемся на ряд выше и т.д., пока все изоб-
   ражение в окне 11*11 точек не будет увеличено.
80 Повторяем цикл.

 В строку  30 можно вставить любую  графику, используя все  16 цветов.
Все, что  попадает в окно 11*11 точек,  будет увеличено.  Теперь, если
кто хочет  стать обладателем  микроредактора, может набить  дополните-
льные строки 90-220. Это дополнение позволит редактировать изображение
в увеличенном окне всеми 16 цветами. Клавиши управления: стрелки - пе-
ремещение маркера, ВК - перебор цветов, ПРОБЕЛ - установить точку.

 90 X=50: Y=50: Z=100: H=100: C=15
100 GOSUB 200: GOSUB 220
110 A$=INKEY$
120 IF A$=CHR$(24) AND Z<200 THEN GOSUB 190: Z=Z+10; X=X+1:
    GOSUB 200
130 IF A$=CHR$(8) AND Z>100 THEN GOSUB 190: Z=Z-10: X=X-1:
    GOSUB 200
140 IF A$=CHR$(25) AND H<200 THEN GOSUB 190: H=H+10: Y=Y+1:
    GOSUB 200
150 IF A$=CHR$(26) AND H>100 THEN GOSUB 190: H=H-10: Y=Y-1:
    GOSUB 200
160 IF A$=CHR$(13) THEN C=C+1: GOSUB 210
170 IF A$=" " THEN COLOR C: PLOT Z+1,H+1,1: LINE Z+9,H+9,BF:
    PLOT X,Y,1
180 GOTO 110
190 COLOR 10: PLOT Z,H,1: LINE Z+10,H+10,B: RETURN
200 COLOR 15: PLOT Z,H,1: LINE Z+10,H+10,B: RETURN
210 IF C=16 THEN C=0
220 COLOR C: PLOT 150,50,1: LINE 160,60,BF: RETURN

 Комментарий:
90 X,Y - координаты по  которым будут ставиться точки в реальном окне,
         то есть в окне 11*11 точек.
   Z,H - координаты нижнего левого угла маркера, которым вы управляете
   C   - текущий цвет.
100  Рисуем маркер и  выводим закрашенный прямоугольник, он определяет
     текущий цвет. Для этого вызываем подпрограмму.
110-150  Управление маркером,  смещение координат в  реальном окне, по
         которым ставится точка.
160  Перебор цвета. Вызываем соответствующую п/п.
170  Рисуем закрашенный  прямоугольник, то есть  увеличенную точку, в
     увеличенном  окне и точку  в реальном  окне. Все  это происходит,
     когда вы нажимаете клавишу "ПРОБЕЛ".
180  Отправляемся на строку 110 для повтора
190  Подпрограмма. Тушим маркер, таким образом восстанавливаем  разде-
     лительную сетку.
200  Подпрограмма рисования маркера.
210-220  Подпрограмма для перебора цвета.

 Если у кого-то есть желание, то эту  программу  можно  усовершенство-
вать, изменить,  переменить клавиши управления  и т.д. Блок управления
можно заменить любым другим более эффективным блоком, но  в данный мо-
мент важно понятие работы программы, а не высокая степень эффективнос-
ти. Для использования  программы  в  своем редакторе нужно сделать все
необходимые координаты перемещаемыми. Это переменные  X  и  Y, в нашем
примере они равны  50. Когда вы напишите блок управления окном, то пе-
ременные  X  и Y должны определять нижний  левый  угол этого окна. Для
изменения размеров окна  уделите внимание  строке 70. Там проверяется,
когда пройден весь ряд,  а так же шаг смещения по  увеличенному и реа-
льному окнам. Думаю, со всем этим проблем не будет.
 Один совет. Не стоит увлекаться большим масштабом увеличения и разме-
ром окна,  так как увеличенное изображение окна выводится прямо поверх
рисуемой картинки, то есть  портит ее. Поэтому перед выводом увеличен-
ного изображения предварительно оператором  GET запоминают часть  кар-
тинки, которая будет испорчена, а затем, когда режим увеличения перес-
тает быть  нужным, эту часть картинки восстанавливают  оператором PUT.
Так вот, если масштаб  увеличения и  окно будут большими, то будет за-
порчен большой участок рисуемой картинки, для сохранения которого при-
дется использовать очень большой массив, что приведет к огромному рас-
ходу памяти. Вывод увеличенного изображения можно сделать в меню, если
оно,  конечно, позволяет  это  сделать. Оптимальнее всего использовать
окно размером не более 20*20 и масштаб увеличения в  4-6 раз. Для эко-
номии памяти  массив, используемый для  сохранения  от порчи картинки,
в режиме увеличения можно использовать и  во всех других режимах, если
он, конечно требуется. Нет необходимости заводить второй массив.
 Теперь рассмотрим режим  "OUTLINE" (обводка). Данный режим существует
в самом мощном графическом редакторе для ПК "ZX-SPECTRUM" "ARTIST-II".
После выполнения режима "OUTLINE" изображение в окне как бы  обводится
по  внешнему контуру.  Иногда это позволяет  получить очень интересный
эффект.  Думаю, что такого режима пока нет ни в  одном графическом ре-
дакторе для "Вектора".  Наберите  программу  и внимательно посмотрите,
как она работает. Воспользуйтесь клавишей УС для пошагового выполнения
программы. Это позволит проанализировать ее работу.

10 X=50:Y=50:B=1:Z=73:H=16
20 CLS:COLOR 15,0:PLOT 55,55,2: LINE 1,1,BS: PRINT "VECTOR"
30 DIM A(150)
40 PLOT X,Y,2:GET Z,H,ADDR(A(0))
50 GOTO 70
60 PUT X,Y,ADDR(A(0)),B:RETURN
70 FOR Q=1 TO 9:READ X1,Y1,B:X=X+X1:Y=Y+Y1:GOSUB 60:NEXT Q
80 DATA 0,1,1,1,0,1,-2,0,1,0,-1,1,0,-1,1,1,0,1,1,0,1,0,1,1,-1,0,0

 Интересная программа? Не правда ли? Достоинство  программы в том, что
она может обработать изображение, состоящее из любого  количества цве-
тов.  Причем достаточно быстро. Алгоритм основан на том, что мы опера-
тором GET снимаем точную копию окна и затем выводим ее, но уже со сме-
щениями, во все стороны. Изображение в окне как бы разрастается. Затем
устанавливаем в операторе PUT режим 0, и тушим изображение в середине.

Комментарий:
10 X,Y - нижний левый угол окна
     B - режим для PUT
   Z,H - размер окна по X и Y
20 Рисуем графику в окне
30 Задаем массив для GET
40 Запоминаем изображение окна
60 Выводим изображение окна
70 Считываем величину смещения окна и режима вывода  из строки 80. Вы-
   зываем п/п вывода изображения окна.
80 Блок DATA. Здесь находятся данные, которые  говорят на сколько сме-
щать окно перед выводом изображения, а так же какой использовать режим
вывода для оператора PUT.

 Теперь, кто желает стать обладателем  режима "SUPEROUTLINE" (супероб-
водка), должен внести  некоторые дополнения и исправления в программу.
Строку 70 FOR Q=1 TO 9 исправить на 70 FOR Q=1 TO 25,  то есть  испра-
вить цикл, так как данных в DATA станет больше. Строку 80  надо  заме-
нить на 80 DATA 0,2,1,2,0,1,-1,0,1,-3,0,1,1,0,1,3,-2,1,0,1,1,0,-2,1,
                -4,1,1,0,1,1,0,-2,1,2,-1,1,2,0,1,-1,0,1,-3,0,1,1,0,1,
                2,2,0,-2,0,0
Добавить строку
        90 DATA 1,1,0,0,-2,0,1,2,0,-2,0,0,2,-2,0,-2,0,0,1,1,1
 После выполнения программы будут   видны все различия между двумя ре-
жимами.  Алгоритм практически одинаковый, разве, что величина смещения
более болшая. Особенность заключается в том,  после того как изображе-
ние в окне "размазано" надо провести таким  же методом отчистку, чтобы
образовалась  каемочка. Это делают оператором PUT  с режимом вывода 0.
Затем запомненое изображение аккуратно вписывают точно в центр каемоч-
ки оператором PUT с режимом вывода 1.
 После того как вы посмотрели работу этих двух программ, можно перейти
к рассмотрению  еще двух не менее эффективных  режимов.  Они позволяют
растягивать фрагмент картинки, находящийся в окне по осям X и Y.
 Сначала  рассмотрим программу, которая будет растягивать  окно по оси
Y.
10 X=100:Y=10:Z=50:H=1:X1=100:Y1=70
20 CLS:COLOR 15,0:PLOT 99,9,1:LINE 151,61,B:
   PLOT 108,30,2:LINE 1,1,BS:PRINT "VECTOR":PAINT 102,11,13,15
30 DIM A(6)
40 FOR L=0 TO 50:PLOT X,Y:GET Z,H,ADDR(A(0))
50 FOR I=0 TO 2:PUT X1,Y1,ADDR(A(0)),2:Y1=Y1+1:NEXT I
60 Y=Y+1
70 NEXT L

 Комментарий:

10 X,Y - нижний левый угол окна.
   Z,H - задаем размер прямоугольника 50*1 точек, для оператора GET.
         Изображением, находящимся в этом прямоугольнике 50*1, мы и
         будем рисовать растянутое изображение.
   X1,Y1 - отсюда будем начинать построение растянутого изображения.
20 Рисуем графику в окне.
30 Задаем массив для оператора GET
40 Сколько раз запоминать прямоугольник 50*1 с окна, так как окно раз-
   мером 50*50, то запоминание производится  50 раз. Самый нижний ряд,
   ряд выше, выше и т.д. до самого верхнего ряда окна.
50 Сколько раз выводить ряд. Этим циклом определяется во сколько раз у
   нас растягивается изображение из окна по оси Y. В нашем случае рас-
   тягивание происходит в  три раза, то  есть FOR I=0 TO  2.  Здесь же
   идет смещение выводимого прямоугольника 50*1, по оси Y.
60 Смещение  для оператора GET,  то  есть здесь мы заставляем оператор
   GET запомнить из окна ряд выше.
70 Повторяем цикл.

 Теперь исправим строки 10, 50 и 60.
10 X=100:Y=10:Z=1:H=50:X1=100:Y1=70
50 FOR I=0 TO 2:PUT X1,Y1,ADDR(A(0)),2:X1=X1+1:NEXT I
60 X=X+1

 Получаем программу,  которая растягивает фрагмент картинки из окна по
оси  X. После того, как вы хорошо разберете алгоритм  программы, можно
сделать растягивание влево и  вниз относительно окна. Для этого доста-
точно внести в нашу программу небольшие изменения, в строки  10,  50 и
60.
 Рассмотрим режим  "Scale" (масштабирование). Хотя программа действует
и  не очень быстро, но зато она позволяет растянуть или сжать фрагмент
картинки из окна как по оси X так и по оси Y. Причем изменение масшта-
ба выбирается произвольно в очень широких пределах.  Изображение может
любой степени сложности, даже при использовании всех 16 цветов. Анало-
гичный режим есть в графических редакторах "ARTIST II" и "ART  STUDIO"
для  ПК "ZX SPECTRUM", правда в этих редакторах изображение после при-
менения режима масштабирования становится черно-белым. Данная же прог-
рамма все цвета сохраняет.

10 X=100:Y=10:X1=100:Y1=70:A2=2:B=2
20 CLS:COLOR 15,0:PLOT 99,9,1:LINE 151,61,B:
   PLOT 108,30,2:LINE 1,1,BS:PRINT "VECTOR":PAINT 102,11,13,15
30 FOR T=0 TO 50
40 FOR I=0 TO 50: PLOT X,Y,2:C=POINT(1):COLOR C
50 PLOT X1,Y1,1:LINE X1+A,Y1+B,BF
60 Y=Y+1:Y1=Y1+B:NEXT I
70 X=X+1:X1=X1+A:Y=10:Y1=70
80 NEXT T

Комментарий:

10 X,Y - нижний левый угол окна
   X1,Y1 - откуда начинать выводить преобразованное изображение
   A,B - коэффициент масштабирования по X и Y соответственно
20 Рисуем графику в окне
30 Цикл на количество рядов по 50 точек, так как окно размером 50*50
40 Сканирование из окна первого левого вертикального ряда из 50 точек.
   Меняем цвет.
50,60  Выводим нижний  ряд окна  закрашенными прямоугольниками, размер
   которых определяется масштабом (переменные A и B). Фактически здесь
   выводится преобразованное изображение.
70 Берем следующий вертикальный ряд, то есть  ряд правее. Переустанав-
   ливаем переменные: Y=10, Y1=70
80 Повторяем цикл.

 После того, как вы посмотрели работу программы попробуйте в строке 10
переменным A и B  присвоить другие значения. Если, например, поставить
A=1, B=1, то получим  точную копию окна, а поставив A=0.8, B=0.8 полу-
чим  даже чуть уменьшенную копию. Установив A=1, B=2, получим растяну-
тое изображение.  Переменные А и В  можно менять в  любых удобных  вам
пределах,  лишь  бы  преобразованное изображение помещалось на экране.
Если кто будет использовать данную программу в своем редакторе, то это
естественно нужно  предусмотреть, поставив определенные условия на А и
В, которые не позволят сделать  недопустимое масштабирование фрагмента
картинки из окна. Если вы хотите выводить  преобразованное изображение
прямо  поверх  окна, то  окно  будет испорчено и масштабирование будет
проведено неправильно. Чтобы этого не произошло сделайте копию изобра-
жения  из окна, в меню и  преобразование производите с копии. Теперь и
поверх окна выводить можно, ведь есть копия в меню.
 Перейдем к другому режиму.  Это "INVERT WINDOW" - инвертирование  со-
держимого окна. Данная программа за 70-72 сек. проведет инвертирование
окна размером 50*50 точек. Если окно взять размером 20*20, то операция
будет выполнена через 12-14 секунд.

10 X=100: Y=100
20 CLS: COLOR 15,0: PLOT 99,99,1: LINE 151,151,B:
   PRINT AT18,13 "VECTOR": PRINT AT 19,10 "06Ц":PRINT AT 19,11 "==="
30 FOR S=0 TO 50: FOR I=0 TO 50: PLOT X,Y,2: C=POINT(1)
40 IF C=15 THEN COLOR 0: PLOT X,Y,1
50 IF C=0 THEN COLOR 15: PLOT X,Y,1
60 X=X+1: NEXT I: Y=Y+1: X=100: NEXT S: Y=100: X=100: GOTO 30

 Комментарий:

10 X,Y - нижний левый угол окна, мнимый курсор
20 Рисуем графику в окне
30 Первый цикл определяет количество горизонтальных рядов (в данном
   случае 50). Второй  цикл  определяет  количество точек в одном ряду
   (их  50). Этими  циклами задается размер окна, которое подвергается
   инвертированию. Проверяем цвет.
40 Если точка белая, то меняем ее на черную.
50 Если точки черная, то меняем ее на белую.
60 Перемещаем мнимый курсор. Когда  циклы будут отработаны, перезадаем
   переменные таким образом: Y=100; X=100 и запускаем программу снова.

 После начала работы  программы сразу  видно,  что она  очень медленно
проводит инвертирование, поэтому  сделайте окно  чуть поменьше (строка
30).  Лучше всего этот режим  сделать в виде подпрограммы  на машинных
кодах. По принципу  инвертирования  можно сделать еще один  интересный
режим.
                    (Окончание в следующем номере)
 ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬
 ѓ                                                                  ѓ
 ѓСамойлов С.А.       Вечная жизнь в программах               Элистаѓ
 ЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇ
 Программа "Флаер" (Бобков О.О.) по адресу 0E51H записать 00. Но этого
мало,  т.к. пули красных тарелок сразу сжигают все жизни. Надо еще за-
писать по адресу 0F67H (это адрес конца программы, откуда идет переход
на начало) JMP 0D57H - теперь вас никто не будет беспокоить!

 