¬¬¬¬¬¬  ®««ЇЇ  ЇЇЇ «««« ««««««« ««««­  ®«««ЇЇ­«« «  ®««­  ««««« ¬¬¬¬¬¬
ЃЃЃЃЃЃ®««««««­ ««« «««Ї «««­««® «««¬­  ®«««¬¬­Ї««Ї®««««««­«««¬  ЃЃЃЃЃЃ
ЇЇЇЇЇЇ  ®««­   ««« «««  «««­  ® ««« ­  ®«««¬¬­ ««   ®««­  «««¬¬ ЇЇЇЇЇЇ

                ¬««««¬ ««¬ ¬«Ї«« ¬««ЇЇ ¬«Ї«« ««Ї«¬ ««¬  ¬««ЇЇ
                ««  «« ««  ««ЇЇ   Ї««¬ ««ЇЇ  «« «« ««¬¬  Ї««¬
                «« ЇЇ  ЇЇ   ЇЇЇЇ ЇЇЇЇ   ЇЇЇЇ «« ЇЇ  ЇЇЇ ЇЇЇЇ
                ««                            «
  ¬ЇЇЇЇЇЇЇЇЇЇЇЇ «« ЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇ ® ЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇ¬
  ‚ "ВЕКТОР-06Ц"««    Информационно-рекламный выпуск "БАЙТ-25"    ‚
  Ѓ             ‚«                                                Ѓ
  ‚ "VECTOR-06C"Ѓ‚    610031, Киров-31, а/я 2629, Луппову Г.Б.    ‚
   ЇЇЇЇЇЇЇЇЇЇЇЇ ЂЃ ЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇ
                ЂЂ
                 Ђ
 ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬
 ѓ                                                                  ѓ
 ѓГуменюк Н.В.          Почта наших читателей             Саяногорскѓ
 ЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇ
                      Здравствуйте, центр "Байт"!

 Пишет Вам один из пользователей и поклонников ПК "Вектор-06Ц". Прежде
всего хочу выразить признательность за создание ИРВ "Байт" для пользо-
вателей "Вектора". Я,  и думаю  многие пользователи, несомненно Вам за
это очень  благодарны. Немного о себе. Компьютерами занимаюсь примерно
четыре года. Первые два года работал на "БК", "МС", "ZX SPECTRUM", по-
том  на  "Векторе".  В  данный  момент  занимаюсь усиленным  изучением
ассемблера, а так же составлением программ на Basic v2.5, с применени-
ем процедур на кодах. Но к  сожалению знания  ассемблера у меня весьма
ограничены. В большинстве  случаев  приходиться  обходиться  командами
Бейсика. За несколько лет работы с Бейсиком я достиг  определенных ре-
зультатов и у меня возникло желание поделиться с начинающими пользова-
телями некоторыми моими знаниями. Многие скептически относятся к прог-
раммам, написанным на Бейсике, но я смело могу заверить,  что они оши-
баются.  При правильном подходе даже на  Бейсике  можно написать более
менее полезную  программу. Я в  частности могу  показать это  на своем
примере. Я  со своим братом  заканчиваем программу на Бейсике "ARTIST"
(графический редактор). Программа  имеет удобное  меню в виде оконного
интерфейса с "падающими" окнами нескольких  степеней вложения. Имеется
четырнадцать основных режимов, в виде графических пиктограмм.
1. Создание рамки  - выбор рамок для будущего рисунка.
2. Калькулятор     - производит `+, -, *, /, кв.корень, %`
3. Деловая графика - отображение  процентного соотношения в виде цвет-
                     ных объемных столбиков.
4. Окна            - инверсия окна,  переворот окна, увеличение  окна,
                     копирование   окна,  перенос  окна,  растягивание
                     окна.
5. База данных     - набор  готовых  геометрических фигур, построение
                     трехмерной   графики,   манипуляция   трехмерными
                     объектами, создание фона.
6. Знакогенератор  - редактирование знакогенератора, загрузка, отгруз-
                     ка.
7. Магнитофон      - отгрузка, загрузка картинки.
8. Принтер         - распечатка на принтере.
9. Карандаш        - рисование отрезков, лучей, ломанных линий, точек,
                     прямоугольников,  окружностей.  Выбор  нескольких
                     типов кистей, напыление, заливка и др.
10.Текст           - вывод текстовых надписей различных размеров.
                     Спец.режимы: автоцентрирование, планирование, пе-
                     чать сверху вниз, по диагонали и др.
11.Экран           - инверсия экрана, стирание экрана, просмотр.
12.Маска           - выбор маски  из 16 представленных, редактирование
                     маски.
13.Цвета           - выбор цвета из 16 представленных.
14.END             - конец работы, восстановление  основных параметров
                     Бейсика, выход в Бейсик.

 Даже не умеющий рисовать, не  будет расстроен, т.к. программа практи-
чески сама  помогает нарисовать рисунок. Конечно, такое  возможно сде-
лать лишь  при самой строжайшей экономии памяти, и тщательном планиро-
вании будущей программы.
 В одном из первых выпусков ИРВ "Байт" была напечатана хорошая  статья
"Как написать  игровую программу на Бейсике". Хочу предложить материал
с  немного  другим уклоном. Т.к. игры на  Бейсике получаются  не очень
серьезны, то лучше использовать  его под программы, которые могут при-
нести реальную пользу, для пользователей. Пусть хоть небольшую. Я имею
в виду прикладные программы (графические редакторы, базы данных, текс-
товые редакторы и др.). Это моя точка зрения. В ниже  приведенной ста-
тье, я  попробовал дать  то,  через что я уже  прошел сам. Так сказать
информация для размышления.

                    Прикладные программы на Бейсике
                 или несколько советов для начинающих

 В одном из номеров ИРВ "Байт" была опубликована статья для начинающих
программистов  "Как написать  игровую программу на Бейсике".  В данной
статье  хочу продолжить разговор на тему  "с чего начать".  Будут даны
общие  направления   для  тех,  кто  хочет попробовать  написать прик-
ладную программу, в частности, графический редактор.
 Для начала советую задать себе несколько вопросов:
1. Будет ли ваша будущая программа приносить реальную пользу?
2. Не будет ли она повторять уже имеющиеся программы?
3. Внесет ли ваша программа что-нибудь новое, или  она будет похожа на
   все остальные программы?
4. Будет ли ваша программа дружелюбна к возможному пользователю, а так
   же проста в обращении?
5. Хватит ли ваших знаний, чтобы осуществить все то, что вы задумали?
6. Хватит ли сил  у Бейсика, чтобы выдать все  то, что Вы  решили сде-
   лать?
 Сначала точно наметьте  цель, а затем пробуйте ее осуществить в своей
программе. Ищите самый простой и  короткий  путь.  Точно рассчитывайте
свои знания, их должно хватать для достижения намеченной цели. Старай-
тесь как можно тщательнее планировать свою  будущую программу. Советую
завести небольшую тетрадь, в которой можно делать  все расчеты, помет-
ки, структурные схемы, эскизы и наброски.
 Когда, в зависимости от поставленной задачи, вы решите, что вам  нуж-
но, то можно приступать к планированию будущей программы. Допустим, вы
решили попробовать сделать графический редактор.
 Различают три основных режима работы графических редакторов: создание
и редактирование на  экране компьютера  картинок, спрайтов  и  наборов
символов.  Наличие всех трех режимов необязательно, но возможность ре-
дактирования всей картинки - отличительный признак графического редак-
тора как такового. Исходя из этого, вы должны продумать, чем и как ри-
совать и  редактировать картинку, спрайт, знакогенератор  и т.д. Расс-
мотрим первый случай, т.е. рисование полноэкранной картинки. Самое ми-
нимальное, что  должен уметь ваш  графический редактор - это  рисовать
простейшие графические примитивы: отрезки, прямоугольники, окружности.
Конечно, скорее всего вам захочется сделать и многое другое. Возникает
мысль о создании  определенного меню, где все режимы в наглядной форме
будут выведены на экран. Каждый  редим в этом меню  можно выделить не-
большой пиктограммой.  Например, если пиктограмма соответствует режиму
рисования окружностей, то и картинка или надпись на ней должна нагляд-
но выражать это. Меню можно разместить в верхней части экрана, можно в
нижней -  это ваше дело. Главное,  чтобы оно было максимально удобным.
Постарайтесь,  чтобы меню было  небольших  размеров, т.к. оно затирает
часть экрана,  т.е. часть рисуемой картинки. Есть один простой выход -
это запоминание через оператор GET части изображения, которое находит-
ся под меню. Но  смотрите, это повлечет  за собой определенный  расход
памяти Бейсика.  Иногда можно  пожертвовать частью экрана, т.е. делать
меню  намертво. В целях экономии  памяти,  меню  можно не  рисовать из
программы, а сделать подгружаемым в Видео ОЗУ. Когда вы нарисовали ме-
ню, следует позаботиться об активизации того или иного режима из ваше-
го меню.  Соответствующая подпрограмма должна перемещать  какой-нибудь
маркер, а также производить перерасчет координат этого маркера или на-
ращивать, либо уменьшать произвольную переменную. Это нужно для опера-
тора ON (переменная) GOTO  (номера строк, по которым находится тот или
иной режим). К примеру у  вас десять основных режимов. Тогда выбранная
переменная будет изменяться от 1 до 10, в зависимости от того, в каком
направлении движется маркер  по меню. Таким способом можно  легко сде-
лать  выбор нужного режима.  Постарайтесь, чтобы вся  работа с выбором
какого-нибудь режима  из  меню осуществлялась  всего  тремя клавишами.
Напрмер, если меню горизонтального типа, можно выбрать: стрелки  впра-
во, влево и пробел.  Стрелки - перемещение маркера, пробел - активиза-
ция нужного режима.
 Теперь  приступим к написанию  режимов. Обычно при активизации режима
на экране появляется маркер в виде стрелки,  квадратика,  окружности и
т.п.  На  этом этапе можно сэкономить немного  памяти. Например, испо-
льзовать всего один маркер,  причем взять его  точно таким же, как и в
меню. Особенно, если маркер был  сделан в виде  спрайта, незатирающего
изображение.  В самом начале сделайте  маркер в виде стрелочки и испо-
льзуйте его всегда,  когда возникнет  необходимость.  Не стоит  заново
прописывать программу для передвижения главного  маркера, возьмите ту,
которая передвигает маркер  по вашему  меню. Чтобы это было можно сде-
лать, позаботьтесь об  этом  заранее. Для  более быстрого  перемещения
спрайта маркера  делайте  его не более, чем 8*8 точек. Следует позабо-
титься и о шаге перемещения. Желательно сделать его двухрежимным. Пер-
вый - смещение на одну точку, а  второй -  на 10-15.  Второй нужен для
быстрого перемещения маркера из  одного угла экрана в другой. Теперь к
блоку перемещения  маркера пристыкуйте блок ограничения границ экрана,
опрос клавиши изменения  шага,  выхода в меню, а также активизации уже
выбранного режима  (это  может  быть установка  точки,  центра будущей
окружности и т.д.). Сейчас кратко рассмотрим  реализацию некоторых ре-
жимов.
1. Проведение отрезков.
 Вы перемещаете маркер по экрану, соответственно изменяются две услов-
ные переменные X и Y. Во всех наших  примерах X  и  Y - это координаты
заостренного кончика стрелки - маркера. Пробел - активизация (условная
фиксация) маркера. Вот вы решили провести отрезок. Поставили  маркер в
нужное место  и нажали пробел.  Переменные X и Y  зафиксировали начало
будущего отрезка.  Сохраним значения X и  Y, воспользовавшись дополни-
тельными переменными А и В. Таким образом, A=X, B=Y. Теперь оператором
GOTO опять запустим программу движения маркера. Ставим маркер в нужное
место и нажимаем пробел. Фиксируются уже измененные X и Y - координаты
конца линии. Осталось самое простое - это запустить строку:
PLOT A,B,1:LINE X,Y
 Отрезок проведен. Повторяем все сначала.

2. Рисование окружностей.
 Ставим маркер в нужное место и  нажимаем пробел. Переменные X и Y за-
фиксировали центр будущей  окружности.  Сохраним  значения  A=X,  B=Y.
Опять перемещаем маркер, теперь уже  для определения радиуса окружнос-
ти. Нажимаем пробел.  После этого  переменные  A  и B - это координаты
центра, X и Y -  это граница  окружности. Надо высчитать  радиус. Вос-
пользуемся формулой, которая определит расстояние от A,B до X,Y.
R=SQR((A-X)^2+(B-Y)^2)
Выполняем строку: CIRCLE A,B,R.

3. Рисование прямоугольников.
 Все аналогично режиму "проведение отрезков".
A,B - нижний левый угол прямоугольника.
X,Y - верхний правый угол прямоугольника.
PLOT A,B,1: LINE X,Y,B

4. Ставим точку.
 Самый простой режим.
PLOT X,Y,1 , где X,Y - координаты маркера.

5. Выбор цвета.
 Режим,  который определяет  текущий  цвет. Т.е., если выбрали целеный
цвет, то и все другие режимы будут использовать зеленый.  Все отрезки,
окружности  и т.д. будут рисоваться зеленым цветом. Этот  режим  можно
сделать методом перебора цветов. В меню нарисуйте  прямоугольник (зак-
рашенный),  он будет отображать  текущий цвет.  При нажатии на опреде-
ленные клавиши, этот прямоугольник будет поочередно менять цвет. Таким
образом, можно будет видеть, какой в данный момент времени установлен.
Не забудьте при переборе цвета изменять переменную, которую затем нуж-
но будет подставлять в  оператор  COLOR при активации  других режимов.
Этот метод  удобен тем, что  отпадает надобность  в показе всех цветов
одновременно. Цветов  может  быть и 8, и 16,  а меню по своим размерам
может быть очень маленьким.
 Выбор цвета можно организовать  в виде "горячих" клавиш, т.е. в блоке
управления  главным маркером вы опрашиваете еще и клавиши смены цвета.
Можно  задействовать ряд цифровых клавиш.  Это удобно тем, что не надо
лишний раз входить в  меню для  смены текущего цвета. Нажал  клавишу -
цвет сменился.  Не удобно тем, что если у вас используется  16 цветов,
то и опрашивать надо 16 клавиш, что замедляет скорость  движения глав-
ного маркера.

6. Заливка.
 Как сделать этот режим, вы наверное догадались  сами. Закраска произ-
водится текущим цветом, через оператор PAINT. Вся проблема в определе-
нии границ закраски. Эту проблему можно решить несколькими путями. Са-
мый простой  - добавить новый режим в меню, где будет определяться те-
кущий цвет границы закраски.  Можно  попробовать  определять  значение
границы закраски через оператор POINT. Относительно центра начала зак-
раски (X, Y) сдвигать в одном из направлений мнимую точку, проверяя ее
через POINT. Если  будет встречен любой цвет, не равный цвету фона, то
он автоматически становится цветом границы закраски.
 Пример:
10 X=X+1
20 PLOT X,Y,2
30 G=POINT(1)
40 GOTO 10
 Мнимую точку сдвигаем вправо, относительно координат главного маркера
-  X  и Y. Переменная G будет принимать значения  встреченного  цвета.
Есть и  более ухищренные способы определения границ закраски, но о них
в другой раз.
 После того, как вы научились делать столь простые режимы графического
редактора, можно подумать и о реализации более мощных процедур рисова-
ния и редактирования экранных картинок. Любой уважающий себя графичес-
кий редактор имеет мощную систему окон. Вы  задаете произвольного раз-
мера окно, а потом проделываете с ним все, что захотите - инвертирова-
ние, скроллинг, зеркальное отображение, увеличение, переворот, копиро-
вание, перенос и даже растягивание картинки в окне. На Бейсике все это
возможно и проверено  на  практике.  Причем все  это можно сделать, не
применяя процедур, написанных в машинных кодах. Ограничение накладыва-
ется лишь на размеры  задаваемого окна.  Его делают одноразмерным  для
всех перечисленных режимов.
 Большое внимание нужно  уделить режиму  "текст", т.к.  вывод надписей
при создании картинок,  заставок бывает просто необходим.  При желании
можно осуществить такие экзотические режимы, которые существуют лишь в
лучших графических редакторах на ПК "ZX SPECTRUM". Это редакторы  "ART
STUDIO" и "ARTIST2". Вот некоторые из них: режим "Thicken" (утолщение)
и  режим "Outline" (обводка). Допустим, вы нарисовали отрезок.  Первый
режим утолщит  его  в два раза, а второй  аккуратно обведет. Это может
быть и не просто  отрезок, а картинка любой степени сложности. На Бей-
сике это  сделать легко. Поэтому не стоит останавливаться на достигну-
том, пробуйте, экспериментируйте и все получится.

                  Экзотические режимы для графических
                         редакторов на Бейсике

 В данной статье хочу привести несколько программ, которые продемонст-
рируют достаточно интересные режимы для графических  редакторов, напи-
санных на Бейсике.  Если  кто-то  из начинающих  пользователей захочет
попробовать сделать графический редактор, то ниже приведенные програм-
мы могут быть очень полезны.  В статье будут рассмотрены и такие режи-
мы, которые  отсутствуют  даже  у  таких редакторов  как  "Карандаш" и
"Рембрандт".
 Любой уважающий себя редактор обычно  имеет мощную систему  окон. По-
льзователь  может  задать  окно  произвольного размера, навести его на
нужный фрагмент картинки, а затем произвести определенное преобразова-
ние с этим фрагментом. Например, перевернуть фрагмент картинки, попав-
ший в окно, либо увеличить его, инвертировать и многое другое. Для ре-
дакторов, написанных на Бейсике, окно делают обычно одноразмерным, так
как  сделать  редактор, где окно можно задавать произвольных  размеров
достаточно сложно. Особенно, если  используются все 16 цветов, то есть
свободная память Бейсика ограничена  15.5 кбт. Хотя 15.5 кбт не так уж
и много, но если все хорошо продумать, то и  этого вполне  достаточно,
чтобы сделать  приличный редактор,  даже если  и ограничиться системой
окон  одного размера.  Надо  сказать, что большинство  очень сильных и
сложных режимов, использующих окно, делаются по  принципу сканирования
изображения  из  окна в  массив,  равный размеру  окна. Через оператор
POINT определяется математический цвет каждой точки изображения в окне
и затем помещается  в массив. Когда он заполняется, определенная прог-
рамма делает преобразование с числами  массива. После того, как массив
будет обработан, изображение  считывается из него опять  на экран,  но
уже в  измененной форме. Правда использование массива хоть и облегчает
работу  программисту, но ведет к проигрышу в быстродействии программы.
Поэтому, если есть возможность обойтись без массива, его не  использу-
ют, то  есть все преобразования делают прямо в  окне. Если  это по ка-
ким-то причинам невозможно, то изображение из окна  копируется в меню,
там проходит преобразование, а потом  уже  возвращается  обратно. Либо
изображение сканируется, преобразуется и перекидывается одновременно с
копией в окно. Большинство приведенных программ именно на этот метод и
рассчитаны. Взять, к примеру, режим увеличения фрагмента картинки. Мо-
жет произойти  такая  ситуация,  когда увеличенное изображение  начнет
накладываться на окно, откуда происходит сканирование. Если  окно, со-
держащее фрагмент картинки испорчено, то что же тогда увеличивать?Поэ-
тому надо использовать один из вариантов:
 1. Перед  увеличением сделать копию  изображения из окна в безопасное
   место,  например, в меню. После чего сканирование изображения можно
   проводить и с копии.
 2. Выводить увеличенное изображение в меню, тогда и картинка не пост-
   радает и окно.
 Выше сказанное справедливо и для некоторых других режимов графических
редакторов.
                Продолжение статьи - в следующем номере
 ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬
 ѓ                                                                  ѓ
 ѓСамойлов С.А.         Вечная жизнь в программах             Элистаѓ
 ЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇ
            Predator        - по адресу 0635H записать 00H
            Color Ball      - по адресу 0B2FH записать 00H
            Гротоход        - по адресу 1060H записать 00H
                            - по адресу 1064H записать 00H
                            - по адресу 1065H записать 00H
                            - по адресу 1066H записать 00H
            Eric            - по адресу 0CF2H записать 00H
            Diamond Country - по адресу 089FH записать 00H
                            - по адресу 08A0H записать 00H
 ѓ          Blaster         - по адресу 2E94H записать 00H          ѓ
 ЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇ

 